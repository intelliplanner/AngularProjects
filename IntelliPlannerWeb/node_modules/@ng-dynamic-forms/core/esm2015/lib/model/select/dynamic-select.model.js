/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ÉµlooseIdentical as looseIdentical } from "@angular/core";
import { DynamicOptionControlModel } from "../dynamic-option-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isFunction } from "../../utils/core.utils";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_SELECT = "SELECT";
/**
 * @record
 * @template T
 */
export function DynamicSelectModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.compareWithFn;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.filterable;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.multiple;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.placeholder;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.prefix;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.suffix;
}
/**
 * @template T
 */
export class DynamicSelectModel extends DynamicOptionControlModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;
        this.filterable = isBoolean(config.filterable) ? config.filterable : false;
        this.multiple = isBoolean(config.multiple) ? config.multiple : false;
        this.placeholder = config.placeholder || "";
        this.prefix = config.prefix || null;
        this.suffix = config.suffix || null;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    select(...indices) {
        /** @type {?} */
        let value = this.multiple ? indices.map((/**
         * @param {?} index
         * @return {?}
         */
        index => this.get(index).value)) : this.get(indices[0]).value;
        this.valueUpdates.next(value);
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicSelectModel.prototype, "filterable", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicSelectModel.prototype, "multiple", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicSelectModel.prototype, "placeholder", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicSelectModel.prototype, "prefix", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicSelectModel.prototype, "suffix", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicSelectModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicSelectModel.prototype.compareWithFn;
    /** @type {?} */
    DynamicSelectModel.prototype.filterable;
    /** @type {?} */
    DynamicSelectModel.prototype.multiple;
    /** @type {?} */
    DynamicSelectModel.prototype.placeholder;
    /** @type {?} */
    DynamicSelectModel.prototype.prefix;
    /** @type {?} */
    DynamicSelectModel.prototype.suffix;
    /** @type {?} */
    DynamicSelectModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1zZWxlY3QubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctZHluYW1pYy1mb3Jtcy9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3NlbGVjdC9keW5hbWljLXNlbGVjdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSx5QkFBeUIsRUFBbUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUU3RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFL0QsTUFBTSxPQUFPLGdDQUFnQyxHQUFHLFFBQVE7Ozs7O0FBRXhELDhDQVFDOzs7SUFORyxpREFBOEM7O0lBQzlDLDhDQUFxQjs7SUFDckIsNENBQW1COztJQUNuQiwrQ0FBcUI7O0lBQ3JCLDBDQUFnQjs7SUFDaEIsMENBQWdCOzs7OztBQUdwQixNQUFNLE9BQU8sa0JBQXNCLFNBQVEseUJBQTRCOzs7OztJQVduRSxZQUFZLE1BQW1DLEVBQUUsTUFBaUM7UUFFOUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUpELFNBQUksR0FBVyxnQ0FBZ0MsQ0FBQztRQU1yRSxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUM5RixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxHQUFHLE9BQWlCOztZQUVuQixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUVwRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUExQm1CO0lBQWYsWUFBWSxFQUFFOztzREFBcUI7QUFDcEI7SUFBZixZQUFZLEVBQUU7O29EQUFtQjtBQUNsQjtJQUFmLFlBQVksRUFBRTs7dURBQXFCO0FBQ3BCO0lBQWYsWUFBWSxFQUFFOztrREFBdUI7QUFDdEI7SUFBZixZQUFZLEVBQUU7O2tEQUF1QjtBQUV0QjtJQUFmLFlBQVksRUFBRTs7Z0RBQTBEOzs7SUFQekUsMkNBQTZDOztJQUM3Qyx3Q0FBb0M7O0lBQ3BDLHNDQUFrQzs7SUFDbEMseUNBQW9DOztJQUNwQyxvQ0FBc0M7O0lBQ3RDLG9DQUFzQzs7SUFFdEMsa0NBQXlFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVsb29zZUlkZW50aWNhbCBhcyBsb29zZUlkZW50aWNhbCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEeW5hbWljT3B0aW9uQ29udHJvbE1vZGVsLCBEeW5hbWljT3B0aW9uQ29udHJvbE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4uL2R5bmFtaWMtb3B0aW9uLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlIH0gZnJvbSBcIi4uLy4uL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBpc0Jvb2xlYW4sIGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9TRUxFQ1QgPSBcIlNFTEVDVFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNTZWxlY3RNb2RlbENvbmZpZzxUPiBleHRlbmRzIER5bmFtaWNPcHRpb25Db250cm9sTW9kZWxDb25maWc8VD4ge1xuXG4gICAgY29tcGFyZVdpdGhGbj86IChvMTogYW55LCBvMjogYW55KSA9PiBib29sZWFuO1xuICAgIGZpbHRlcmFibGU/OiBib29sZWFuO1xuICAgIG11bHRpcGxlPzogYm9vbGVhbjtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICBwcmVmaXg/OiBzdHJpbmc7XG4gICAgc3VmZml4Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY1NlbGVjdE1vZGVsPFQ+IGV4dGVuZHMgRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbDxUPiB7XG5cbiAgICBjb21wYXJlV2l0aEZuOiAobzE6IGFueSwgbzI6IGFueSkgPT4gYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgZmlsdGVyYWJsZTogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHByZWZpeDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgc3VmZml4OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfU0VMRUNUO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljU2VsZWN0TW9kZWxDb25maWc8VD4sIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dCkge1xuXG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLmNvbXBhcmVXaXRoRm4gPSBpc0Z1bmN0aW9uKGNvbmZpZy5jb21wYXJlV2l0aEZuKSA/IGNvbmZpZy5jb21wYXJlV2l0aEZuIDogbG9vc2VJZGVudGljYWw7XG4gICAgICAgIHRoaXMuZmlsdGVyYWJsZSA9IGlzQm9vbGVhbihjb25maWcuZmlsdGVyYWJsZSkgPyBjb25maWcuZmlsdGVyYWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzLm11bHRpcGxlID0gaXNCb29sZWFuKGNvbmZpZy5tdWx0aXBsZSkgPyBjb25maWcubXVsdGlwbGUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGNvbmZpZy5wbGFjZWhvbGRlciB8fCBcIlwiO1xuICAgICAgICB0aGlzLnByZWZpeCA9IGNvbmZpZy5wcmVmaXggfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdWZmaXggPSBjb25maWcuc3VmZml4IHx8IG51bGw7XG4gICAgfVxuXG4gICAgc2VsZWN0KC4uLmluZGljZXM6IG51bWJlcltdKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5tdWx0aXBsZSA/IGluZGljZXMubWFwKGluZGV4ID0+IHRoaXMuZ2V0KGluZGV4KS52YWx1ZSkgOiB0aGlzLmdldChpbmRpY2VzWzBdKS52YWx1ZTtcblxuICAgICAgICB0aGlzLnZhbHVlVXBkYXRlcy5uZXh0KHZhbHVlKTtcbiAgICB9XG59Il19