/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { DYNAMIC_MATCHERS } from "./dynamic-form-relation.matchers";
import { AND_OPERATOR, OR_OPERATOR } from "../model/misc/dynamic-form-control-relation.model";
import { startWith } from "rxjs/operators";
import { merge } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-form-relation.matchers";
export class DynamicFormRelationService {
    /**
     * @param {?} DYNAMIC_MATCHERS
     * @param {?} injector
     */
    constructor(DYNAMIC_MATCHERS, injector) {
        this.DYNAMIC_MATCHERS = DYNAMIC_MATCHERS;
        this.injector = injector;
    }
    /**
     * @param {?} group
     * @param {?} condition
     * @return {?}
     */
    getRelatedFormControl(group, condition) {
        /** @type {?} */
        const control = condition.rootPath ?
            (/** @type {?} */ (group.root.get(condition.rootPath))) : (/** @type {?} */ (group.get(condition.id)));
        if (control === null) {
            throw new Error(`No related form control with id ${condition.id} could be found`);
        }
        return control;
    }
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    getRelatedFormControls(model, group) {
        /** @type {?} */
        const controls = {};
        model.relations.forEach((/**
         * @param {?} relation
         * @return {?}
         */
        relation => relation.when.forEach((/**
         * @param {?} condition
         * @return {?}
         */
        condition => {
            if (model.id === condition.id) {
                throw new Error(`FormControl ${model.id} cannot depend on itself`);
            }
            /** @type {?} */
            const control = this.getRelatedFormControl(group, condition);
            if (control && !controls.hasOwnProperty(model.id)) {
                controls[condition.id] = control;
            }
        }))));
        return controls;
    }
    /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    findRelation(relations, matcher) {
        return relations.find((/**
         * @param {?} relation
         * @return {?}
         */
        relation => relation.match === matcher.match || relation.match === matcher.opposingMatch)) || null;
    }
    /**
     * @param {?} relation
     * @param {?} group
     * @param {?} matcher
     * @return {?}
     */
    matchesCondition(relation, group, matcher) {
        /** @type {?} */
        const operator = relation.operator || OR_OPERATOR;
        return relation.when.reduce((/**
         * @param {?} hasAlreadyMatched
         * @param {?} condition
         * @param {?} index
         * @return {?}
         */
        (hasAlreadyMatched, condition, index) => {
            /** @type {?} */
            const relatedControl = this.getRelatedFormControl(group, condition);
            if (relatedControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedControl.value || condition.status === relatedControl.status;
            }
            if (relatedControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedControl.value || condition.status === relatedControl.status);
            }
            return false;
        }), false);
    }
    /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    subscribeRelations(model, group, control) {
        /** @type {?} */
        const relatedFormControls = this.getRelatedFormControls(model, group);
        /** @type {?} */
        const subscriptions = [];
        Object.entries(relatedFormControls).forEach((/**
         * @param {?} __0
         * @return {?}
         */
        ([_id, relatedControl]) => {
            /** @type {?} */
            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            /** @type {?} */
            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe((/**
             * @return {?}
             */
            () => {
                if (Array.isArray(this.DYNAMIC_MATCHERS)) {
                    this.DYNAMIC_MATCHERS.forEach((/**
                     * @param {?} matcher
                     * @return {?}
                     */
                    matcher => {
                        /** @type {?} */
                        const relation = this.findRelation(model.relations, matcher);
                        if (relation) {
                            /** @type {?} */
                            const hasMatch = this.matchesCondition(relation, group, matcher);
                            matcher.onChange(hasMatch, model, control, this.injector);
                        }
                    }));
                }
            })));
        }));
        return subscriptions;
    }
}
DynamicFormRelationService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
DynamicFormRelationService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
    { type: Injector }
];
/** @nocollapse */ DynamicFormRelationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(i0.ɵɵinject(i1.DYNAMIC_MATCHERS, 8), i0.ɵɵinject(i0.INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.DYNAMIC_MATCHERS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,