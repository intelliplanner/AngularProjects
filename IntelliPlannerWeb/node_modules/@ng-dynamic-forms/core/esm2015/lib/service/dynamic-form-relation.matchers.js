/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from "@angular/core";
import { DynamicFormValidationService } from "./dynamic-form-validation.service";
import { MATCH_DISABLED, MATCH_ENABLED, MATCH_HIDDEN, MATCH_OPTIONAL, MATCH_REQUIRED, MATCH_VISIBLE } from "../model/misc/dynamic-form-control-relation.model";
import { isObject } from "../utils/core.utils";
/**
 * @record
 */
export function DynamicFormControlMatcher() { }
if (false) {
    /** @type {?} */
    DynamicFormControlMatcher.prototype.match;
    /** @type {?} */
    DynamicFormControlMatcher.prototype.opposingMatch;
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    DynamicFormControlMatcher.prototype.onChange = function (hasMatch, model, control, injector) { };
}
/** @type {?} */
export const DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
/** @type {?} */
export const DisabledMatcher = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    onChange(hasMatch, model) {
        model.disabledUpdates.next(hasMatch);
    }
};
/** @type {?} */
export const HiddenMatcher = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    onChange(hasMatch, model) {
        model.hidden = hasMatch;
    }
};
/** @type {?} */
export const RequiredMatcher = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    onChange(hasMatch, model, control, injector) {
        /** @type {?} */
        let validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? Object.assign({}, model.validators, { required: null }) : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators["required"];
                validatorsConfig = Object.assign({}, model.validators);
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
    }
};
/** @type {?} */
export const DISABLED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DisabledMatcher,
    multi: true
};
/** @type {?} */
export const HIDDEN_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HiddenMatcher,
    multi: true
};
/** @type {?} */
export const REQUIRED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: RequiredMatcher,
    multi: true
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXJlbGF0aW9uLm1hdGNoZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1yZWxhdGlvbi5tYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFHeEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUNILGNBQWMsRUFDZCxhQUFhLEVBQ2IsWUFBWSxFQUNaLGNBQWMsRUFDZCxjQUFjLEVBQ2QsYUFBYSxFQUNoQixNQUFNLG1EQUFtRCxDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUUvQywrQ0FNQzs7O0lBSkcsMENBQWM7O0lBQ2Qsa0RBQTZCOzs7Ozs7OztJQUU3QixpR0FBNEc7OztBQUdoSCxNQUFNLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQTRCLGtCQUFrQixDQUFDOztBQUVqRyxNQUFNLE9BQU8sZUFBZSxHQUE4QjtJQUV0RCxLQUFLLEVBQUUsY0FBYztJQUNyQixhQUFhLEVBQUUsYUFBYTs7Ozs7O0lBQzVCLFFBQVEsQ0FBQyxRQUFpQixFQUFFLEtBQThCO1FBQ3RELEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDSjs7QUFFRCxNQUFNLE9BQU8sYUFBYSxHQUE4QjtJQUVwRCxLQUFLLEVBQUUsWUFBWTtJQUNuQixhQUFhLEVBQUUsYUFBYTs7Ozs7O0lBQzVCLFFBQVEsQ0FBQyxRQUFpQixFQUFFLEtBQThCO1FBQ3RELEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7Q0FDSjs7QUFFRCxNQUFNLE9BQU8sZUFBZSxHQUE4QjtJQUV0RCxLQUFLLEVBQUUsY0FBYztJQUNyQixhQUFhLEVBQUUsY0FBYzs7Ozs7Ozs7SUFDN0IsUUFBUSxDQUFDLFFBQWlCLEVBQUUsS0FBOEIsRUFBRSxPQUFvQixFQUFFLFFBQWtCOztZQUU1RixnQkFBZ0IsR0FBRyxJQUFJO1FBRTNCLElBQUksUUFBUSxFQUFFO1lBRVYsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLG1CQUFLLEtBQUssQ0FBQyxVQUFVLElBQUUsUUFBUSxFQUFFLElBQUksSUFBRSxDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FFNUc7YUFBTTtZQUVILElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFFNUIsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNwQyxnQkFBZ0IscUJBQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzVDO1NBQ0o7UUFFRCxRQUFRLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xHLENBQUM7Q0FDSjs7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCLEdBQWtCO0lBQzNDLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsUUFBUSxFQUFFLGVBQWU7SUFDekIsS0FBSyxFQUFFLElBQUk7Q0FDZDs7QUFFRCxNQUFNLE9BQU8sY0FBYyxHQUFrQjtJQUN6QyxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFFBQVEsRUFBRSxhQUFhO0lBQ3ZCLEtBQUssRUFBRSxJQUFJO0NBQ2Q7O0FBRUQsTUFBTSxPQUFPLGdCQUFnQixHQUFrQjtJQUMzQyxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLEtBQUssRUFBRSxJQUFJO0NBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIFZhbHVlUHJvdmlkZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsIH0gZnJvbSBcIi4uL21vZGVsL2R5bmFtaWMtZm9ybS1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZVwiO1xuaW1wb3J0IHtcbiAgICBNQVRDSF9ESVNBQkxFRCxcbiAgICBNQVRDSF9FTkFCTEVELFxuICAgIE1BVENIX0hJRERFTixcbiAgICBNQVRDSF9PUFRJT05BTCxcbiAgICBNQVRDSF9SRVFVSVJFRCxcbiAgICBNQVRDSF9WSVNJQkxFXG59IGZyb20gXCIuLi9tb2RlbC9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLXJlbGF0aW9uLm1vZGVsXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciB7XG5cbiAgICBtYXRjaDogc3RyaW5nO1xuICAgIG9wcG9zaW5nTWF0Y2g6IHN0cmluZyB8IG51bGw7XG5cbiAgICBvbkNoYW5nZShoYXNNYXRjaDogYm9vbGVhbiwgbW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBjb250cm9sOiBGb3JtQ29udHJvbCwgaW5qZWN0b3I6IEluamVjdG9yKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfTUFUQ0hFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlcj4oXCJEWU5BTUlDX01BVENIRVJTXCIpO1xuXG5leHBvcnQgY29uc3QgRGlzYWJsZWRNYXRjaGVyOiBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyID0ge1xuXG4gICAgbWF0Y2g6IE1BVENIX0RJU0FCTEVELFxuICAgIG9wcG9zaW5nTWF0Y2g6IE1BVENIX0VOQUJMRUQsXG4gICAgb25DaGFuZ2UoaGFzTWF0Y2g6IGJvb2xlYW4sIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHZvaWQge1xuICAgICAgICBtb2RlbC5kaXNhYmxlZFVwZGF0ZXMubmV4dChoYXNNYXRjaCk7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IEhpZGRlbk1hdGNoZXI6IER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXIgPSB7XG5cbiAgICBtYXRjaDogTUFUQ0hfSElEREVOLFxuICAgIG9wcG9zaW5nTWF0Y2g6IE1BVENIX1ZJU0lCTEUsXG4gICAgb25DaGFuZ2UoaGFzTWF0Y2g6IGJvb2xlYW4sIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHZvaWQge1xuICAgICAgICBtb2RlbC5oaWRkZW4gPSBoYXNNYXRjaDtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgUmVxdWlyZWRNYXRjaGVyOiBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyID0ge1xuXG4gICAgbWF0Y2g6IE1BVENIX1JFUVVJUkVELFxuICAgIG9wcG9zaW5nTWF0Y2g6IE1BVENIX09QVElPTkFMLFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoOiBib29sZWFuLCBtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWwsIGNvbnRyb2w6IEZvcm1Db250cm9sLCBpbmplY3RvcjogSW5qZWN0b3IpOiB2b2lkIHtcblxuICAgICAgICBsZXQgdmFsaWRhdG9yc0NvbmZpZyA9IG51bGw7XG5cbiAgICAgICAgaWYgKGhhc01hdGNoKSB7XG5cbiAgICAgICAgICAgIHZhbGlkYXRvcnNDb25maWcgPSBpc09iamVjdChtb2RlbC52YWxpZGF0b3JzKSA/IHsuLi5tb2RlbC52YWxpZGF0b3JzLCByZXF1aXJlZDogbnVsbH0gOiB7cmVxdWlyZWQ6IG51bGx9O1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChtb2RlbC52YWxpZGF0b3JzKSkge1xuXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1vZGVsLnZhbGlkYXRvcnNbXCJyZXF1aXJlZFwiXTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzQ29uZmlnID0gey4uLm1vZGVsLnZhbGlkYXRvcnN9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW5qZWN0b3IuZ2V0KER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UpLnVwZGF0ZVZhbGlkYXRvcnModmFsaWRhdG9yc0NvbmZpZywgY29udHJvbCwgbW9kZWwpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBESVNBQkxFRF9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IERpc2FibGVkTWF0Y2hlcixcbiAgICBtdWx0aTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IEhJRERFTl9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IEhpZGRlbk1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBSRVFVSVJFRF9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IFJlcXVpcmVkTWF0Y2hlcixcbiAgICBtdWx0aTogdHJ1ZVxufTtcbiJdfQ==