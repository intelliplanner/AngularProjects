/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject } from "rxjs";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean, isObject, isString } from "../utils/core.utils";
/**
 * @record
 */
export function DynamicFormControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.asyncValidators;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.disabled;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.errorMessages;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.hidden;
    /** @type {?} */
    DynamicFormControlModelConfig.prototype.id;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.label;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.labelTooltip;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.controlTooltip;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.name;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.relations;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.updateOn;
    /** @type {?|undefined} */
    DynamicFormControlModelConfig.prototype.validators;
}
/**
 * @abstract
 */
var DynamicFormControlModel = /** @class */ (function () {
    function DynamicFormControlModel(config, layout) {
        var _this = this;
        if (layout === void 0) { layout = null; }
        this.parent = null;
        this.asyncValidators = config.asyncValidators || null;
        this.errorMessages = config.errorMessages || null;
        this.hidden = isBoolean(config.hidden) ? config.hidden : false;
        this.id = config.id;
        this.label = config.label || null;
        this.labelTooltip = config.labelTooltip || null;
        this.controlTooltip = config.controlTooltip || null;
        this.layout = layout;
        this.name = config.name || config.id;
        this.relations = Array.isArray(config.relations) ? config.relations : [];
        this.updateOn = isString(config.updateOn) ? config.updateOn : null;
        this.validators = config.validators || null;
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.disabledUpdates = new Subject();
        this.disabledUpdates.subscribe((/**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) { return _this.disabled = disabled; }));
    }
    Object.defineProperty(DynamicFormControlModel.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlModel.prototype, "hasErrorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return isObject(this.errorMessages);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormControlModel.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return serialize(this);
    };
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "asyncValidators", void 0);
    tslib_1.__decorate([
        serializable("disabled"),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicFormControlModel.prototype, "_disabled", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "errorMessages", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicFormControlModel.prototype, "hidden", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "id", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "label", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "labelTooltip", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "controlTooltip", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "layout", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "name", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Array)
    ], DynamicFormControlModel.prototype, "relations", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "updateOn", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "validators", void 0);
    return DynamicFormControlModel;
}());
export { DynamicFormControlModel };
if (false) {
    /** @type {?} */
    DynamicFormControlModel.prototype.asyncValidators;
    /** @type {?} */
    DynamicFormControlModel.prototype._disabled;
    /** @type {?} */
    DynamicFormControlModel.prototype.disabledUpdates;
    /** @type {?} */
    DynamicFormControlModel.prototype.errorMessages;
    /** @type {?} */
    DynamicFormControlModel.prototype.hidden;
    /** @type {?} */
    DynamicFormControlModel.prototype.id;
    /** @type {?} */
    DynamicFormControlModel.prototype.label;
    /** @type {?} */
    DynamicFormControlModel.prototype.labelTooltip;
    /** @type {?} */
    DynamicFormControlModel.prototype.controlTooltip;
    /** @type {?} */
    DynamicFormControlModel.prototype.layout;
    /** @type {?} */
    DynamicFormControlModel.prototype.name;
    /** @type {?} */
    DynamicFormControlModel.prototype.parent;
    /** @type {?} */
    DynamicFormControlModel.prototype.relations;
    /** @type {?} */
    DynamicFormControlModel.prototype.updateOn;
    /** @type {?} */
    DynamicFormControlModel.prototype.validators;
    /** @type {?} */
    DynamicFormControlModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctZHluYW1pYy1mb3Jtcy9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2R5bmFtaWMtZm9ybS1jb250cm9sLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUsvQixPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBSXBFLG1EQWNDOzs7SUFaRyx3REFBMEM7O0lBQzFDLGlEQUFtQjs7SUFDbkIsc0RBQXdDOztJQUN4QywrQ0FBaUI7O0lBQ2pCLDJDQUFXOztJQUNYLDhDQUFlOztJQUNmLHFEQUFzQjs7SUFDdEIsdURBQXdCOztJQUN4Qiw2Q0FBYzs7SUFDZCxrREFBeUM7O0lBQ3pDLGlEQUFxQjs7SUFDckIsbURBQXFDOzs7OztBQUd6QztJQW9CSSxpQ0FBc0IsTUFBcUMsRUFBRSxNQUE4QztRQUEzRyxpQkFrQkM7UUFsQjRELHVCQUFBLEVBQUEsYUFBOEM7UUFQM0csV0FBTSxHQUEyQixJQUFJLENBQUM7UUFTbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQztRQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMs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dCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY1BhdGhhYmxlIH0gZnJvbSBcIi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1wYXRoLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xSZWxhdGlvbiB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtcmVsYXRpb24ubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnIH0gZnJvbSBcIi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC12YWxpZGF0aW9uLm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUsIHNlcmlhbGl6ZSB9IGZyb20gXCIuLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc09iamVjdCwgaXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBGb3JtSG9va3MgPSAnY2hhbmdlJyB8ICdibHVyJyB8ICdzdWJtaXQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsQ29uZmlnIHtcblxuICAgIGFzeW5jVmFsaWRhdG9ycz86IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBlcnJvck1lc3NhZ2VzPzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWc7XG4gICAgaGlkZGVuPzogYm9vbGVhbjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIGxhYmVsVG9vbHRpcD86IHN0cmluZztcbiAgICBjb250cm9sVG9vbHRpcD86IHN0cmluZztcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlbGF0aW9ucz86IER5bmFtaWNGb3JtQ29udHJvbFJlbGF0aW9uW107XG4gICAgdXBkYXRlT24/OiBGb3JtSG9va3M7XG4gICAgdmFsaWRhdG9ycz86IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgaW1wbGVtZW50cyBEeW5hbWljUGF0aGFibGUge1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIGFzeW5jVmFsaWRhdG9yczogRHluYW1pY1ZhbGlkYXRvcnNDb25maWcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoXCJkaXNhYmxlZFwiKSBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWRVcGRhdGVzOiBTdWJqZWN0PGJvb2xlYW4+O1xuICAgIEBzZXJpYWxpemFibGUoKSBlcnJvck1lc3NhZ2VzOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGhpZGRlbjogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgaWQ6IHN0cmluZztcbiAgICBAc2VyaWFsaXphYmxlKCkgbGFiZWw6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGxhYmVsVG9vbHRpcDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgY29udHJvbFRvb2x0aXA6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGxheW91dDogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbmFtZTogc3RyaW5nO1xuICAgIHBhcmVudDogRHluYW1pY1BhdGhhYmxlIHwgbnVsbCA9IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlbGF0aW9uczogRHluYW1pY0Zvcm1Db250cm9sUmVsYXRpb25bXTtcbiAgICBAc2VyaWFsaXphYmxlKCkgdXBkYXRlT246IEZvcm1Ib29rcyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHZhbGlkYXRvcnM6IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnIHwgbnVsbDtcblxuICAgIGFic3RyYWN0IHJlYWRvbmx5IHR5cGU6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsQ29uZmlnLCBsYXlvdXQ6IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB8IG51bGwgPSBudWxsKSB7XG5cbiAgICAgICAgdGhpcy5hc3luY1ZhbGlkYXRvcnMgPSBjb25maWcuYXN5bmNWYWxpZGF0b3JzIHx8IG51bGw7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlcyA9IGNvbmZpZy5lcnJvck1lc3NhZ2VzIHx8IG51bGw7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gaXNCb29sZWFuKGNvbmZpZy5oaWRkZW4pID8gY29uZmlnLmhpZGRlbiA6IGZhbHNlO1xuICAgICAgICB0aGlzLmlkID0gY29uZmlnLmlkO1xuICAgICAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsIHx8IG51bGw7XG4gICAgICAgIHRoaXMubGFiZWxUb29sdGlwID0gY29uZmlnLmxhYmVsVG9vbHRpcCB8fCBudWxsO1xuICAgICAgICB0aGlzLmNvbnRyb2xUb29sdGlwID0gY29uZmlnLmNvbnRyb2xUb29sdGlwIHx8IG51bGw7XG4gICAgICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZSB8fCBjb25maWcuaWQ7XG4gICAgICAgIHRoaXMucmVsYXRpb25zID0gQXJyYXkuaXNBcnJheShjb25maWcucmVsYXRpb25zKSA/IGNvbmZpZy5yZWxhdGlvbnMgOiBbXTtcbiAgICAgICAgdGhpcy51cGRhdGVPbiA9IGlzU3RyaW5nKGNvbmZpZy51cGRhdGVPbikgPyBjb25maWcudXBkYXRlT24gOiBudWxsO1xuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSBjb25maWcudmFsaWRhdG9ycyB8fCBudWxsO1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Jvb2xlYW4oY29uZmlnLmRpc2FibGVkKSA/IGNvbmZpZy5kaXNhYmxlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2FibGVkVXBkYXRlcyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRVcGRhdGVzLnN1YnNjcmliZShkaXNhYmxlZCA9PiB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQpO1xuICAgIH1cblxuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICAgIH1cblxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBoYXNFcnJvck1lc3NhZ2VzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNPYmplY3QodGhpcy5lcnJvck1lc3NhZ2VzKTtcbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemUodGhpcyk7XG4gICAgfVxufVxuIl19