/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
/**
 * @record
 */
export function DynamicCheckControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicCheckControlModelConfig.prototype.labelPosition;
}
/**
 * @abstract
 */
var DynamicCheckControlModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicCheckControlModel, _super);
    function DynamicCheckControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.labelPosition = config.labelPosition || null;
        _this.value = isBoolean(_this.value) ? _this.value : false;
        return _this;
    }
    Object.defineProperty(DynamicCheckControlModel.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.value;
        },
        set: /**
         * @param {?} checked
         * @return {?}
         */
        function (checked) {
            this.valueUpdates.next(checked);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicCheckControlModel.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
    };
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicCheckControlModel.prototype, "labelPosition", void 0);
    return DynamicCheckControlModel;
}(DynamicFormValueControlModel));
export { DynamicCheckControlModel };
if (false) {
    /** @type {?} */
    DynamicCheckControlModel.prototype.labelPosition;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaGVjay1jb250cm9sLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9keW5hbWljLWNoZWNrLWNvbnRyb2wubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQXNDLE1BQU0sb0NBQW9DLENBQUM7QUFFdEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUVoRCxvREFHQzs7O0lBREcsdURBQXVCOzs7OztBQUczQjtJQUF1RCxvREFBcUM7SUFJeEYsa0NBQXNCLE1BQXNDLEVBQUUsTUFBaUM7UUFBL0YsWUFFSSxrQkFBTSxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBSXhCO1FBRkcsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQztRQUNsRCxLQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7SUFDNUQsQ0FBQztJQUVELHNCQUFJLDZDQUFPOzs7O1FBQVg7WUFDSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBRUQsVUFBWSxPQUFnQjtZQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxDQUFDOzs7T0FKQTs7OztJQU1ELHlDQUFNOzs7SUFBTjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFwQmU7UUFBZixZQUFZLEVBQUU7O21FQUE4QjtJQXFCakQsK0JBQUM7Q0FBQSxBQXZCRCxDQUF1RCw0QkFBNEIsR0F1QmxGO1NBdkJxQix3QkFBd0I7OztJQUUxQyxpREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsLCBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0NoZWNrQ29udHJvbE1vZGVsQ29uZmlnIGV4dGVuZHMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZzxib29sZWFuPiB7XG5cbiAgICBsYWJlbFBvc2l0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0NoZWNrQ29udHJvbE1vZGVsIGV4dGVuZHMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxib29sZWFuPiB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgbGFiZWxQb3NpdGlvbjogc3RyaW5nIHwgbnVsbDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNDaGVja0NvbnRyb2xNb2RlbENvbmZpZywgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMubGFiZWxQb3NpdGlvbiA9IGNvbmZpZy5sYWJlbFBvc2l0aW9uIHx8IG51bGw7XG4gICAgICAgIHRoaXMudmFsdWUgPSBpc0Jvb2xlYW4odGhpcy52YWx1ZSkgPyB0aGlzLnZhbHVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0IGNoZWNrZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgc2V0IGNoZWNrZWQoY2hlY2tlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnZhbHVlVXBkYXRlcy5uZXh0KGNoZWNrZWQpO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcbiAgICB9XG59Il19