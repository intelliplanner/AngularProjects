/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormControlEventType, isDynamicFormControlEvent } from "./dynamic-form-control.event";
import { DynamicFormValueControlModel } from "../model/dynamic-form-value-control.model";
import { DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from "../model/checkbox/dynamic-checkbox.model";
import { DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_TYPE_INPUT } from "../model/input/dynamic-input.model";
import { isString } from "../utils/core.utils";
/**
 * @abstract
 */
var /**
 * @abstract
 */
DynamicFormControlContainerComponent = /** @class */ (function () {
    function DynamicFormControlContainerComponent(componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.context = null;
        //protected viewRefs: EmbeddedViewRef<DynamicFormControlModel>[] = [];
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var _a;
        /** @type {?} */
        var groupChange = (/** @type {?} */ (changes["group"]));
        /** @type {?} */
        var modelChange = (/** @type {?} */ (changes["model"]));
        if (modelChange) {
            this.destroyFormControlComponent();
            //this.removeTemplates();
            this.createFormControlComponent();
            //this.embedTemplates();
        }
        if (groupChange || modelChange) {
            if (this.model) {
                this.unsubscribe();
                if (this.group) {
                    this.control = (/** @type {?} */ (this.group.get(this.model.id)));
                    this.subscriptions.push(this.control.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return _this.onControlValueChanges(value); })));
                }
                this.subscriptions.push(this.model.disabledUpdates.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return _this.onModelDisabledUpdates(value); })));
                if (this.model instanceof DynamicFormValueControlModel) {
                    /** @type {?} */
                    var model = (/** @type {?} */ (this.model));
                    this.subscriptions.push(model.valueUpdates.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return _this.onModelValueUpdates(value); })));
                }
                if (this.model.relations.length > 0) {
                    (_a = this.subscriptions).push.apply(_a, tslib_1.__spread(this.relationService.subscribeRelations(this.model, this.group, this.control)));
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyFormControlComponent();
        this.unsubscribe();
    };
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "errorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.validationService.createErrorMessages(this.control, this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasHint", {
        get: /**
         * @return {?}
         */
        function () {
            return isString(((/** @type {?} */ (this.model))).hint);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hint", {
        get: /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.model))).hint || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return isString(this.model.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isCheckbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "elementId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layoutService.getElementId(this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "showErrorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "templates", {
        get: /**
         * @return {?}
         */
        function () {
            return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "startTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "endTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.getClass = /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    function (context, place, model) {
        if (model === void 0) { model = this.model; }
        /** @type {?} */
        var controlLayout = this.layoutService.findByModel(model, this.layout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    };
    /**
     * @protected
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.createFormControlComponent = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var componentType = this.componentType;
        if (componentType !== null) {
            /** @type {?} */
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            /** @type {?} */
            var instance = this.componentRef.instance;
            instance.group = this.group;
            instance.layout = this.layout;
            instance.model = (/** @type {?} */ (this.model));
            if (this.templates) {
                instance.templates = this.templates;
            }
            this.componentSubscriptions.push(instance.blur.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onBlur($event); })));
            this.componentSubscriptions.push(instance.change.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onChange($event); })));
            this.componentSubscriptions.push(instance.focus.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onFocus($event); })));
            if (instance.customEvent !== undefined) {
                this.componentSubscriptions.push(instance.customEvent.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                function ($event) { return _this.onCustomEvent($event); })));
            }
            this.registerComponentRef(this.componentRef);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.destroyFormControlComponent = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentSubscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            function (subscription) { return subscription.unsubscribe(); }));
            this.componentSubscriptions = [];
            this.unregisterComponentRef();
            this.componentRef.destroy();
        }
    };
    /*
    protected embedTemplates(): void {

        const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);

        if (Array.isArray(templates)) {

            templates.forEach(template => {

                const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                this.viewRefs.push(viewRef);
            });
        }
    }

    protected removeTemplates(): void {
        this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
    }
    */
    /*
        protected embedTemplates(): void {
    
            const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);
    
            if (Array.isArray(templates)) {
    
                templates.forEach(template => {
    
                    const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                    this.viewRefs.push(viewRef);
                });
            }
        }
    
        protected removeTemplates(): void {
            this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
        }
        */
    /**
     * @protected
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.createDynamicFormControlEvent = /*
        protected embedTemplates(): void {
    
            const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);
    
            if (Array.isArray(templates)) {
    
                templates.forEach(template => {
    
                    const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                    this.viewRefs.push(viewRef);
                });
            }
        }
    
        protected removeTemplates(): void {
            this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
        }
        */
    /**
     * @protected
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    function ($event, type) {
        return { $event: $event, context: this.context, control: this.control, group: this.group, model: this.model, type: type };
    };
    /**
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onControlValueChanges = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.model instanceof DynamicFormValueControlModel) {
            /** @type {?} */
            var model = (/** @type {?} */ (this.model));
            if (model.value !== value) {
                model.valueUpdates.next(value);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onModelValueUpdates = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onModelDisabledUpdates = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value ? this.control.disable() : this.control.enable();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event && $event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                /** @type {?} */
                var model = (/** @type {?} */ (this.model));
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    /** @type {?} */
                    var inputElement = $event.target || $event.srcElement;
                    model.files = (/** @type {?} */ (inputElement.files));
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this.hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this.hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onCustomEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var emitter = (/** @type {?} */ (this.customEvent));
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    };
    /**
     * @private
     * @param {?} instanceRef
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.registerComponentRef = /**
     * @private
     * @param {?} instanceRef
     * @return {?}
     */
    function (instanceRef) {
        /** @type {?} */
        var index;
        if (this.context && this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.registerFormControlRef(this.model, instanceRef, index);
    };
    /**
     * @private
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.unregisterComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index;
        if (this.context && this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.unregisterFormControlRef(this.model.id, index);
    };
    return DynamicFormControlContainerComponent;
}());
/**
 * @abstract
 */
export { DynamicFormControlContainerComponent };
if (false) {
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.context;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.control;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.group;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.hasFocus;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.layout;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.model;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.contentTemplateList;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.inputTemplateList;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.blur;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.change;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.customEvent;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.focus;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.componentViewContainerRef;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentRef;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentSubscriptions;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.validationService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.relationService;
    /**
     * @abstract
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.componentType = function () { };
}
//# sourceMappingURL=data:application/json;base64,