/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { DYNAMIC_MATCHERS } from "./dynamic-form-relation.matchers";
import { AND_OPERATOR, OR_OPERATOR } from "../model/misc/dynamic-form-control-relation.model";
import { startWith } from "rxjs/operators";
import { merge } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-form-relation.matchers";
var DynamicFormRelationService = /** @class */ (function () {
    function DynamicFormRelationService(DYNAMIC_MATCHERS, injector) {
        this.DYNAMIC_MATCHERS = DYNAMIC_MATCHERS;
        this.injector = injector;
    }
    /**
     * @param {?} group
     * @param {?} condition
     * @return {?}
     */
    DynamicFormRelationService.prototype.getRelatedFormControl = /**
     * @param {?} group
     * @param {?} condition
     * @return {?}
     */
    function (group, condition) {
        /** @type {?} */
        var control = condition.rootPath ?
            (/** @type {?} */ (group.root.get(condition.rootPath))) : (/** @type {?} */ (group.get(condition.id)));
        if (control === null) {
            throw new Error("No related form control with id " + condition.id + " could be found");
        }
        return control;
    };
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    DynamicFormRelationService.prototype.getRelatedFormControls = /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    function (model, group) {
        var _this = this;
        /** @type {?} */
        var controls = {};
        model.relations.forEach((/**
         * @param {?} relation
         * @return {?}
         */
        function (relation) { return relation.when.forEach((/**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            if (model.id === condition.id) {
                throw new Error("FormControl " + model.id + " cannot depend on itself");
            }
            /** @type {?} */
            var control = _this.getRelatedFormControl(group, condition);
            if (control && !controls.hasOwnProperty(model.id)) {
                controls[condition.id] = control;
            }
        })); }));
        return controls;
    };
    /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.findRelation = /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    function (relations, matcher) {
        return relations.find((/**
         * @param {?} relation
         * @return {?}
         */
        function (relation) { return relation.match === matcher.match || relation.match === matcher.opposingMatch; })) || null;
    };
    /**
     * @param {?} relation
     * @param {?} group
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.matchesCondition = /**
     * @param {?} relation
     * @param {?} group
     * @param {?} matcher
     * @return {?}
     */
    function (relation, group, matcher) {
        var _this = this;
        /** @type {?} */
        var operator = relation.operator || OR_OPERATOR;
        return relation.when.reduce((/**
         * @param {?} hasAlreadyMatched
         * @param {?} condition
         * @param {?} index
         * @return {?}
         */
        function (hasAlreadyMatched, condition, index) {
            /** @type {?} */
            var relatedControl = _this.getRelatedFormControl(group, condition);
            if (relatedControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedControl.value || condition.status === relatedControl.status;
            }
            if (relatedControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedControl.value || condition.status === relatedControl.status);
            }
            return false;
        }), false);
    };
    /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    DynamicFormRelationService.prototype.subscribeRelations = /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    function (model, group, control) {
        var _this = this;
        /** @type {?} */
        var relatedFormControls = this.getRelatedFormControls(model, group);
        /** @type {?} */
        var subscriptions = [];
        Object.entries(relatedFormControls).forEach((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), _id = _b[0], relatedControl = _b[1];
            /** @type {?} */
            var valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            /** @type {?} */
            var statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe((/**
             * @return {?}
             */
            function () {
                if (Array.isArray(_this.DYNAMIC_MATCHERS)) {
                    _this.DYNAMIC_MATCHERS.forEach((/**
                     * @param {?} matcher
                     * @return {?}
                     */
                    function (matcher) {
                        /** @type {?} */
                        var relation = _this.findRelation(model.relations, matcher);
                        if (relation) {
                            /** @type {?} */
                            var hasMatch = _this.matchesCondition(relation, group, matcher);
                            matcher.onChange(hasMatch, model, control, _this.injector);
                        }
                    }));
                }
            })));
        }));
        return subscriptions;
    };
    DynamicFormRelationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormRelationService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
        { type: Injector }
    ]; };
    /** @nocollapse */ DynamicFormRelationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(i0.ɵɵinject(i1.DYNAMIC_MATCHERS, 8), i0.ɵɵinject(i0.INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
    return DynamicFormRelationService;
}());
export { DynamicFormRelationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.DYNAMIC_MATCHERS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,