/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from "@angular/core";
import { DynamicFormValidationService } from "./dynamic-form-validation.service";
import { MATCH_DISABLED, MATCH_ENABLED, MATCH_HIDDEN, MATCH_OPTIONAL, MATCH_REQUIRED, MATCH_VISIBLE } from "../model/misc/dynamic-form-control-relation.model";
import { isObject } from "../utils/core.utils";
/**
 * @record
 */
export function DynamicFormControlMatcher() { }
if (false) {
    /** @type {?} */
    DynamicFormControlMatcher.prototype.match;
    /** @type {?} */
    DynamicFormControlMatcher.prototype.opposingMatch;
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    DynamicFormControlMatcher.prototype.onChange = function (hasMatch, model, control, injector) { };
}
/** @type {?} */
export var DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
/** @type {?} */
export var DisabledMatcher = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.disabledUpdates.next(hasMatch);
    }
};
/** @type {?} */
export var HiddenMatcher = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.hidden = hasMatch;
    }
};
/** @type {?} */
export var RequiredMatcher = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    function (hasMatch, model, control, injector) {
        /** @type {?} */
        var validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? tslib_1.__assign({}, model.validators, { required: null }) : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators["required"];
                validatorsConfig = tslib_1.__assign({}, model.validators);
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
    }
};
/** @type {?} */
export var DISABLED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DisabledMatcher,
    multi: true
};
/** @type {?} */
export var HIDDEN_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HiddenMatcher,
    multi: true
};
/** @type {?} */
export var REQUIRED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: RequiredMatcher,
    multi: true
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXJlbGF0aW9uLm1hdGNoZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1yZWxhdGlvbi5tYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBR3hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFDSCxjQUFjLEVBQ2QsYUFBYSxFQUNiLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxFQUNkLGFBQWEsRUFDaEIsTUFBTSxtREFBbUQsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFFL0MsK0NBTUM7OztJQUpHLDBDQUFjOztJQUNkLGtEQUE2Qjs7Ozs7Ozs7SUFFN0IsaUdBQTRHOzs7QUFHaEgsTUFBTSxLQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUE0QixrQkFBa0IsQ0FBQzs7QUFFakcsTUFBTSxLQUFPLGVBQWUsR0FBOEI7SUFFdEQsS0FBSyxFQUFFLGNBQWM7SUFDckIsYUFBYSxFQUFFLGFBQWE7SUFDNUIsUUFBUTs7Ozs7SUFBUixVQUFTLFFBQWlCLEVBQUUsS0FBOEI7UUFDdEQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKOztBQUVELE1BQU0sS0FBTyxhQUFhLEdBQThCO0lBRXBELEtBQUssRUFBRSxZQUFZO0lBQ25CLGFBQWEsRUFBRSxhQUFhO0lBQzVCLFFBQVE7Ozs7O0lBQVIsVUFBUyxRQUFpQixFQUFFLEtBQThCO1FBQ3RELEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7Q0FDSjs7QUFFRCxNQUFNLEtBQU8sZUFBZSxHQUE4QjtJQUV0RCxLQUFLLEVBQUUsY0FBYztJQUNyQixhQUFhLEVBQUUsY0FBYztJQUM3QixRQUFROzs7Ozs7O0lBQVIsVUFBUyxRQUFpQixFQUFFLEtBQThCLEVBQUUsT0FBb0IsRUFBRSxRQUFrQjs7WUFFNUYsZ0JBQWdCLEdBQUcsSUFBSTtRQUUzQixJQUFJLFFBQVEsRUFBRTtZQUVWLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxzQkFBSyxLQUFLLENBQUMsVUFBVSxJQUFFLFFBQVEsRUFBRSxJQUFJLElBQUUsQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1NBRTVHO2FBQU07WUFFSCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBRTVCLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDcEMsZ0JBQWdCLHdCQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUM1QztTQUNKO1FBRUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0o7O0FBRUQsTUFBTSxLQUFPLGdCQUFnQixHQUFrQjtJQUMzQyxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLEtBQUssRUFBRSxJQUFJO0NBQ2Q7O0FBRUQsTUFBTSxLQUFPLGNBQWMsR0FBa0I7SUFDekMsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixRQUFRLEVBQUUsYUFBYTtJQUN2QixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQUVELE1BQU0sS0FBTyxnQkFBZ0IsR0FBa0I7SUFDM0MsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixRQUFRLEVBQUUsZUFBZTtJQUN6QixLQUFLLEVBQUUsSUFBSTtDQUNkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBWYWx1ZVByb3ZpZGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS12YWxpZGF0aW9uLnNlcnZpY2VcIjtcbmltcG9ydCB7XG4gICAgTUFUQ0hfRElTQUJMRUQsXG4gICAgTUFUQ0hfRU5BQkxFRCxcbiAgICBNQVRDSF9ISURERU4sXG4gICAgTUFUQ0hfT1BUSU9OQUwsXG4gICAgTUFUQ0hfUkVRVUlSRUQsXG4gICAgTUFUQ0hfVklTSUJMRVxufSBmcm9tIFwiLi4vbW9kZWwvbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1yZWxhdGlvbi5tb2RlbFwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXIge1xuXG4gICAgbWF0Y2g6IHN0cmluZztcbiAgICBvcHBvc2luZ01hdGNoOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgb25DaGFuZ2UoaGFzTWF0Y2g6IGJvb2xlYW4sIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCwgY29udHJvbDogRm9ybUNvbnRyb2wsIGluamVjdG9yOiBJbmplY3Rvcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX01BVENIRVJTID0gbmV3IEluamVjdGlvblRva2VuPER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXI+KFwiRFlOQU1JQ19NQVRDSEVSU1wiKTtcblxuZXhwb3J0IGNvbnN0IERpc2FibGVkTWF0Y2hlcjogRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciA9IHtcblxuICAgIG1hdGNoOiBNQVRDSF9ESVNBQkxFRCxcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9FTkFCTEVELFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoOiBib29sZWFuLCBtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWwpOiB2b2lkIHtcbiAgICAgICAgbW9kZWwuZGlzYWJsZWRVcGRhdGVzLm5leHQoaGFzTWF0Y2gpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBIaWRkZW5NYXRjaGVyOiBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyID0ge1xuXG4gICAgbWF0Y2g6IE1BVENIX0hJRERFTixcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9WSVNJQkxFLFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoOiBib29sZWFuLCBtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWwpOiB2b2lkIHtcbiAgICAgICAgbW9kZWwuaGlkZGVuID0gaGFzTWF0Y2g7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IFJlcXVpcmVkTWF0Y2hlcjogRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciA9IHtcblxuICAgIG1hdGNoOiBNQVRDSF9SRVFVSVJFRCxcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9PUFRJT05BTCxcbiAgICBvbkNoYW5nZShoYXNNYXRjaDogYm9vbGVhbiwgbW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBjb250cm9sOiBGb3JtQ29udHJvbCwgaW5qZWN0b3I6IEluamVjdG9yKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHZhbGlkYXRvcnNDb25maWcgPSBudWxsO1xuXG4gICAgICAgIGlmIChoYXNNYXRjaCkge1xuXG4gICAgICAgICAgICB2YWxpZGF0b3JzQ29uZmlnID0gaXNPYmplY3QobW9kZWwudmFsaWRhdG9ycykgPyB7Li4ubW9kZWwudmFsaWRhdG9ycywgcmVxdWlyZWQ6IG51bGx9IDoge3JlcXVpcmVkOiBudWxsfTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3QobW9kZWwudmFsaWRhdG9ycykpIHtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtb2RlbC52YWxpZGF0b3JzW1wicmVxdWlyZWRcIl07XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yc0NvbmZpZyA9IHsuLi5tb2RlbC52YWxpZGF0b3JzfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluamVjdG9yLmdldChEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlKS51cGRhdGVWYWxpZGF0b3JzKHZhbGlkYXRvcnNDb25maWcsIGNvbnRyb2wsIG1vZGVsKTtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgRElTQUJMRURfTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBEaXNhYmxlZE1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBISURERU5fTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBIaWRkZW5NYXRjaGVyLFxuICAgIG11bHRpOiB0cnVlXG59O1xuXG5leHBvcnQgY29uc3QgUkVRVUlSRURfTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBSZXF1aXJlZE1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG4iXX0=