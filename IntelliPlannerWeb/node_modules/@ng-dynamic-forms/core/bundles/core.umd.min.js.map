{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ng-dynamic-forms/core/lib/utils/core.utils.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-array.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.event.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-component.ts","ng://@ng-dynamic-forms/core/lib/decorator/serializable.decorator.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-value-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-array/dynamic-form-array.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-check-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox.model.ts","ng://@ng-dynamic-forms/core/lib/utils/autofill.utils.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-input-control.model.ts","ng://@ng-dynamic-forms/core/lib/utils/json.utils.ts","ng://@ng-dynamic-forms/core/lib/model/input/dynamic-input.model.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-container.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-templateable-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-id.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-list.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-template.directive.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-date-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-file-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-option-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-group/dynamic-form-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/colorpicker/dynamic-colorpicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/datepicker/dynamic-datepicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/editor/dynamic-editor.model.ts","ng://@ng-dynamic-forms/core/lib/model/file-upload/dynamic-file-upload.model.ts","ng://@ng-dynamic-forms/core/lib/model/radio/dynamic-radio-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/rating/dynamic-rating.model.ts","ng://@ng-dynamic-forms/core/lib/model/select/dynamic-select.model.ts","ng://@ng-dynamic-forms/core/lib/model/slider/dynamic-slider.model.ts","ng://@ng-dynamic-forms/core/lib/model/switch/dynamic-switch.model.ts","ng://@ng-dynamic-forms/core/lib/model/textarea/dynamic-textarea.model.ts","ng://@ng-dynamic-forms/core/lib/model/timepicker/dynamic-timepicker.model.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.validators.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validation.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-component.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-layout.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.matchers.ts","ng://@ng-dynamic-forms/core/lib/model/misc/dynamic-form-control-relation.model.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.service.ts","ng://@ng-dynamic-forms/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isBoolean","isFunction","isNumber","isObject","isString","DynamicFormControlComponent","layoutService","validationService","_hasFocus","control","group","get","model","id","Error","getElementId","createErrorMessages","invalid","valid","hasErrorMessages","touched","hasFocus","isInvalid","getClass","context","place","controlLayout","findByModel","layout","onBlur","$event","Event","stopPropagation","blur","emit","onChange","change","onEmbeddedCheckboxChange","valueUpdates","checked","onCustomEvent","type","bypass","emitter","customEvent","customEventType","onFocus","focus","DynamicFormArrayComponent","tslib_1.__extends","getStartTemplate","templates","getEndTemplate","Blur","Change","Custom","Focus","isDynamicFormControlEvent","DynamicFormComponent","formService","trackByFn","_index","formLayout","onEvent","DynamicFormControlEventType","METADATA_KEY_SERIALIZABLE","serializable","name","defineMetadata","getSerializables","serializables","getMetadata","serialize","reduce","prev","prop","DynamicFormControlModel","config","_this","parent","asyncValidators","errorMessages","hidden","label","labelTooltip","controlTooltip","relations","isArray","updateOn","validators","disabled","disabledUpdates","Subject","subscribe","_disabled","toJSON","tslib_1.__decorate","DynamicFormValueControlModel","_super","additional","hint","required","tabIndex","undefined","_value","getAdditional","defaultValue","DynamicFormArrayGroupModel","index","$implicit","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","DynamicFormArrayModel","groups","groupFactory","groupAsyncValidators","groupPrototype","groupValidators","initialCount","forEach","arrayGroup","addGroup","updateGroupIndex","insertGroup","splice","moveGroup","step","_a","removeGroup","clear","DynamicCheckControlModel","labelPosition","toggle","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","DynamicCheckboxModel","indeterminate","AUTOCOMPLETE_ON","AUTOFILL_TOKENS_ADDRESS","AUTOFILL_TOKENS_CONTACT","AUTOFILL_FIELDS","AUTOFILL_FIELDS_CONTACT","DynamicInputControlModel","autoComplete","autoFocus","maxLength","minLength","placeholder","prefix","readOnly","spellCheck","suffix","maskToString","mask","RegExp","toString","map","maskFromString","startsWith","endsWith","slice","parseReviver","_key","test","Date","DYNAMIC_FORM_CONTROL_TYPE_INPUT","DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT","DynamicInputModel","files","list$","_list","_listId","accept","inputType","max","min","multiple","pattern","list","isObservable","of","pipe","tap","json","Function","DynamicFormControlContainerComponent","componentFactoryResolver","componentService","relationService","componentSubscriptions","subscriptions","ngOnChanges","changes","groupChange","modelChange","destroyFormControlComponent","createFormControlComponent","unsubscribe","valueChanges","onControlValueChanges","onModelDisabledUpdates","onModelValueUpdates","subscribeRelations","ngOnDestroy","inputTemplateList","contentTemplateList","componentType","componentFactory","resolveComponentFactory","componentViewContainerRef","componentRef","createComponent","instance","registerComponentRef","subscription","unregisterComponentRef","destroy","createDynamicFormControlEvent","setValue","disable","enable","inputElement","srcElement","instanceRef","registerFormControlRef","unregisterFormControlRef","DynamicTemplateableFormControlComponent","ngAfterViewInit","filterTemplatesByModel","template","bindTemplate","as","templateDirectives","has","property","viewChild","mapTemplate","DynamicIdDirective","elementRef","renderer","dynamicId","setAttribute","nativeElement","Directive","args","selector","ElementRef","Renderer2","Input","DynamicListDirective","listId","Start","End","DynamicTemplateDirective","templateRef","align","DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT","TemplateRef","DynamicDateControlModel","format","DynamicFileControlModel","DynamicFormOption","text","DynamicOptionControlModel","_options","options","updateOptions$","options$","optionConfig","optionsConfig","add","insert","option","remove","indices","_i","DYNAMIC_FORM_CONTROL_TYPE_GROUP","DynamicFormGroupModel","legend","set","controlModel","move","size","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DynamicCheckboxGroupModel","check","uncheck","checkAll","uncheckAll","DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER","DynamicColorPickerModel","inline","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","DynamicDatePickerModel","focusedDate","toggleIcon","toggleLabel","DYNAMIC_FORM_CONTROL_TYPE_EDITOR","DynamicEditorModel","DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD","DynamicFileUploadModel","autoUpload","maxSize","minSize","removeUrl","showFileList","url","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DynamicRadioGroupModel","select","DYNAMIC_FORM_CONTROL_TYPE_RATING","DynamicRatingModel","DYNAMIC_FORM_CONTROL_TYPE_SELECT","DynamicSelectModel","compareWithFn","looseIdentical","filterable","DYNAMIC_FORM_CONTROL_TYPE_SLIDER","DynamicSliderModel","vertical","DYNAMIC_FORM_CONTROL_TYPE_SWITCH","DynamicSwitchModel","offLabel","onLabel","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","DYNAMIC_FORM_TEXTAREA_WRAP_SOFT","DynamicTextAreaModel","cols","rows","wrap","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","DynamicTimePickerModel","meridian","showSeconds","DYNAMIC_VALIDATORS","InjectionToken","DynamicFormValidationService","NG_VALIDATORS","NG_ASYNC_VALIDATORS","getValidatorFn","validatorName","validatorArgs","validatorsToken","validatorFn","Validators","find","getValidatorFns","validatorsConfig","validatorFns","keys","validatorConfigKey","validatorConfigValue","isValidatorDescriptor","descriptor","parseErrorMessageConfig","replace","_match","expression","propertySource","propertyName","indexOf","getValidator","getAsyncValidator","getValidators","getAsyncValidators","asyncValidatorsConfig","updateValidators","clearValidators","setValidators","updateValueAndValidity","updateAsyncValidators","clearAsyncValidators","setAsyncValidators","messages","messagesConfig_1","errors","validationErrorKey","messageKey","validationError","getError","messageTemplate","isFormHook","Injectable","providedIn","Optional","Inject","Map","DynamicFormService","createAbstractControlOptions","createFormArray","formArrayModel","controls","groupModel","groupOptions","createFormGroup","FormArray","formModel","controlState","controlOptions","FormControl","FormGroup","getPathSegment","getPath","join","path","unshift","addFormGroupControl","formGroup","models","insertFormGroupControl","_formModel","moveFormGroupControl","controlName","idx","addControl","removeFormGroupControl","removeControl","addFormArrayGroup","formArray","insertFormArrayGroup","moveFormArrayGroup","newIndex","moveUp","movingGroups_1","at","formControl","position","setControl","removeFormArrayGroup","removeAt","clearFormArray","findById","result","findByIdFn","groupModel_1","tslib_1.__values","groupModel_1_1","findModelById","findControlByModel","root","fromJSON","formModelJSON","JSON","parse","formArrayModel_1","inputModel","DYNAMIC_FORM_CONTROL_MAP_FN","DynamicFormComponentService","componentRefs","getFormControlRef","modelId","ref","arrayRef","console","warn","getCustomComponentType","DynamicFormLayoutService","_b","_c","split","substring","trim","filterCallback","modelType","QueryList","filter","getAlignedTemplate","alignment","DYNAMIC_MATCHERS","DisabledMatcher","match","opposingMatch","hasMatch","HiddenMatcher","RequiredMatcher","injector","DISABLED_MATCHER","provide","useValue","multi","HIDDEN_MATCHER","REQUIRED_MATCHER","DynamicFormRelationService","getRelatedFormControl","condition","rootPath","getRelatedFormControls","relation","when","findRelation","matcher","matchesCondition","operator","hasAlreadyMatched","relatedControl","status","relatedFormControls","entries","startWith","statusChanges","merge","Injector","DynamicFormsCoreModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","exports","token","tokens","toExpression","total","currentValue","tokensAddress","tokensContact","fields","fieldsContact"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isBoolean(value: any): value is boolean {\n    return typeof value === \"boolean\";\n}\n\nexport function isFunction(value: any): value is Function {\n    return typeof value === \"function\";\n}\n\nexport function isNumber(value: any): value is number {\n    return typeof value === \"number\";\n}\n\nexport function isObject(value: any): value is object {\n    return typeof value === \"object\" && value !== null;\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\";\n}\n","import { EventEmitter } from \"@angular/core\";\nimport { AbstractControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormControlTemplates\n} from \"../service/dynamic-form-layout.service\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\n\n    private _hasFocus: boolean = false;\n\n    group: FormGroup;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n    templates: DynamicFormControlTemplates;\n\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    customEvent: EventEmitter<DynamicFormControlCustomEvent> | undefined;\n    focus: EventEmitter<any>;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {}\n\n    get control(): AbstractControl | never {\n\n        const control = this.group.get(this.model.id);\n\n        if (control === null) {\n            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);\n        }\n\n        return control as AbstractControl;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onBlur($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = false;\n        this.blur.emit($event);\n    }\n\n    onChange($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this.change.emit($event);\n    }\n\n    onEmbeddedCheckboxChange($event: Event, model: DynamicCheckboxModel) {\n\n        this.onChange($event);\n\n        model.valueUpdates.next(($event.target as HTMLInputElement).checked);\n    }\n\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlCustomEvent>;\n\n        if (bypass) {\n\n            emitter.emit($event);\n\n        } else if (isString(type)) {\n\n            emitter.emit({customEvent: $event, customEventType: type});\n        }\n    }\n\n    onFocus($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = true;\n        this.focus.emit($event);\n    }\n}\n","import { QueryList } from \"@angular/core\";\nimport { FormArray } from \"@angular/forms\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\n\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\n\n    model: DynamicFormArrayModel;\n    templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    get array(): FormArray {\n        return this.control as FormArray;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getStartTemplate(this.model, this.templates);\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getEndTemplate(this.model, this.templates);\n    }\n}\n","import { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport enum DynamicFormControlEventType {Blur = \"blur\", Change = \"change\", Custom = \"custom\", Focus = \"focus\"}\n\nexport interface DynamicFormControlEvent {\n\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\n    context: DynamicFormArrayGroupModel | null;\n    control: FormControl;\n    group: FormGroup;\n    model: DynamicFormControlModel;\n    type: string;\n}\n\nexport interface DynamicFormControlCustomEvent {\n\n    customEvent: any;\n    customEventType: string;\n}\n\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\n    return isObject($event) && $event.hasOwnProperty(\"$event\");\n}","import { EventEmitter, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\nimport { DynamicFormControlEvent, DynamicFormControlEventType } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../model/dynamic-form.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"../service/dynamic-form.service\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\n\nexport abstract class DynamicFormComponent {\n\n    formGroup: FormGroup;\n    formModel: DynamicFormModel;\n    formLayout: DynamicFormLayout;\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    templates: QueryList<DynamicTemplateDirective>;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    focus: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent>;\n\n    protected constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {}\n\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\n        return model.id;\n    }\n\n    getClass(model: DynamicFormControlModel, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.formLayout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onEvent($event: DynamicFormControlEvent, type: string) {\n\n        switch (type) {\n\n            case DynamicFormControlEventType.Blur:\n                this.blur.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Change:\n                this.change.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Focus:\n                this.focus.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Custom:\n                this.customEvent.emit($event);\n                break;\n        }\n    }\n}\n","declare let Reflect: any;\n\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\n\nexport interface SerializableProperty {\n\n    key: string;\n    name: string;\n}\n\nexport function serializable(name?: string): (target: any, key: string) => void {\n\n    return function (target, key) {\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key: key, name: name || key}, target, key);\n    };\n}\n\nexport function getSerializables(target: any): SerializableProperty[] {\n\n    let serializables = [];\n\n    for (let key in target) {\n\n        let metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\n\n        if (metadata) {\n            serializables.push(metadata);\n        }\n    }\n\n    return serializables;\n}\n\nexport function serialize(target: any, prototype?: any): Object {\n\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\n\n        prev[prop.name] = target[prop.key];\n\n        return prev;\n\n    }, {});\n}","import { Subject } from \"rxjs\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\nimport { DynamicFormControlRelation } from \"./misc/dynamic-form-control-relation.model\";\nimport { DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject, isString } from \"../utils/core.utils\";\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n\nexport interface DynamicFormControlModelConfig {\n\n    asyncValidators?: DynamicValidatorsConfig;\n    disabled?: boolean;\n    errorMessages?: DynamicValidatorsConfig;\n    hidden?: boolean;\n    id: string;\n    label?: string;\n    labelTooltip?: string;\n    controlTooltip?: string;\n    name?: string;\n    relations?: DynamicFormControlRelation[];\n    updateOn?: FormHooks;\n    validators?: DynamicValidatorsConfig;\n}\n\nexport abstract class DynamicFormControlModel implements DynamicPathable {\n\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\n    @serializable(\"disabled\") _disabled: boolean;\n    disabledUpdates: Subject<boolean>;\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\n    @serializable() hidden: boolean;\n    @serializable() id: string;\n    @serializable() label: string | null;\n    @serializable() labelTooltip: string | null;\n    @serializable() controlTooltip: string | null;\n    @serializable() layout: DynamicFormControlLayout | null;\n    @serializable() name: string;\n    parent: DynamicPathable | null = null;\n    @serializable() relations: DynamicFormControlRelation[];\n    @serializable() updateOn: FormHooks | null;\n    @serializable() validators: DynamicValidatorsConfig | null;\n\n    abstract readonly type: string;\n\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\n\n        this.asyncValidators = config.asyncValidators || null;\n        this.errorMessages = config.errorMessages || null;\n        this.hidden = isBoolean(config.hidden) ? config.hidden : false;\n        this.id = config.id;\n        this.label = config.label || null;\n        this.labelTooltip = config.labelTooltip || null;\n        this.controlTooltip = config.controlTooltip || null;\n        this.layout = layout;\n        this.name = config.name || config.id;\n        this.relations = Array.isArray(config.relations) ? config.relations : [];\n        this.updateOn = isString(config.updateOn) ? config.updateOn : null;\n        this.validators = config.validators || null;\n\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\n        this.disabledUpdates = new Subject<boolean>();\n        this.disabledUpdates.subscribe(disabled => this.disabled = disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    get hasErrorMessages(): boolean {\n        return isObject(this.errorMessages);\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n","import { Subject } from \"rxjs\";\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject } from \"../utils/core.utils\";\n\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\n\n    additional?: { [key: string]: any };\n    hint?: string;\n    required?: boolean;\n    tabIndex?: number;\n    value?: T;\n}\n\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\n\n    @serializable() additional: { [key: string]: any } | null;\n    @serializable() hint: string | null;\n    @serializable() required: boolean;\n    @serializable() tabIndex: number | null;\n    @serializable(\"value\") _value: T | null;\n    valueUpdates: Subject<T>;\n\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.additional = isObject(config.additional) ? config.additional : null;\n        this.hint = config.hint || null;\n        this.required = isBoolean(config.required) ? config.required : false;\n        this.tabIndex = config.tabIndex || null;\n\n        this.value = config.value !== null && config.value !== undefined ? config.value : null;\n        this.valueUpdates = new Subject<T>();\n        this.valueUpdates.subscribe((value: T) => this.value = value);\n    }\n\n    set value(value: T | null) {\n        this._value = value;\n    }\n\n    get value(): T | null {\n        return this._value;\n    }\n\n    getAdditional(key: string, defaultValue: any | null | undefined = undefined): any {\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\n    }\n}\n","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\nimport { isFunction, isNumber } from \"../../utils/core.utils\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormModel;\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormModel = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    groupAsyncValidators?: DynamicValidatorsConfig;\n    groupFactory?: () => DynamicFormModel;\n    groupValidators?: DynamicValidatorsConfig;\n    groups?: DynamicFormArrayGroupModel[] | null;\n    initialCount?: number;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\n    groupFactory: () => DynamicFormModel;\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n\n    @serializable() readonly groupPrototype: DynamicFormModel; // only to recreate model from JSON\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        if (isFunction(config.groupFactory)) {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.groupAsyncValidators = config.groupAsyncValidators || null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidators = config.groupValidators || null;\n        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n\n    clear(): void {\n        this.groups.splice(0);\n        this.updateGroupIndex();\n    }\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\n\n    labelPosition?: string;\n}\n\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\n\n    @serializable() labelPosition: string | null;\n\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.labelPosition = config.labelPosition || null;\n        this.value = isBoolean(this.value) ? this.value : false;\n    }\n\n    get checked(): boolean {\n        return !!this.value;\n    }\n\n    set checked(checked: boolean) {\n        this.valueUpdates.next(checked);\n    }\n\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\n\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\n\n    indeterminate?: boolean;\n}\n\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\n\n    @serializable() indeterminate: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;\n    }\n}","export const AUTOCOMPLETE_OFF = \"off\";\nexport const AUTOCOMPLETE_ON = \"on\";\n\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\n\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\n\nexport const AUTOFILL_TOKEN_HOME = \"home\";\nexport const AUTOFILL_TOKEN_WORK = \"work\";\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\n\nexport const AUTOFILL_TOKENS_CONTACT = [\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\n];\n\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\n\nexport const AUTOFILL_FIELD_NAME = \"name\";\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\n\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\n\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\n\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\n\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\n\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\n\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\n\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\n\nexport const AUTOFILL_FIELD_SEX = \"sex\";\n\nexport const AUTOFILL_FIELD_URL = \"url\";\n\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\n\nexport const AUTOFILL_FIELDS = [\n\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\n];\n\nexport const AUTOFILL_FIELD_TEL = \"tel\";\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\n\nexport const AUTOFILL_FIELDS_CONTACT = [\n\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\n];\n\nexport function isAddressToken(token: string): boolean {\n    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\n}\n\nexport function isContactField(token: string): boolean {\n    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isContactToken(token: string): boolean {\n    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isField(token: string): boolean {\n    return AUTOFILL_FIELDS.indexOf(token) > -1;\n}\n\nexport function isSectionToken(token: string): boolean {\n    return token.startsWith(\"section-\");\n}\n\nexport function validate(tokens: string): boolean {\n\n    let toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`,\n        tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression),\n        tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression),\n        fields = AUTOFILL_FIELDS.reduce(toExpression),\n        fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression),\n        regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\n\n    return regex.test(tokens);\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { AUTOCOMPLETE_ON } from \"../utils/autofill.utils\";\nimport { isBoolean, isNumber } from \"../utils/core.utils\";\n\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\n\n    autoComplete?: string;\n    autoFocus?: boolean;\n    maxLength?: number;\n    minLength?: number;\n    placeholder?: string;\n    prefix?: string;\n    readOnly?: boolean;\n    spellCheck?: boolean;\n    suffix?: string;\n}\n\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\n\n    @serializable() autoComplete: string;\n    @serializable() autoFocus: boolean;\n    @serializable() maxLength: number | null;\n    @serializable() minLength: number | null;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() spellCheck: boolean;\n    @serializable() suffix: string | null;\n\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;\n        this.minLength = isNumber(config.minLength) ? config.minLength : null;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;\n        this.suffix = config.suffix || null;\n    }\n}","import { isString } from \"./core.utils\";\n\nexport function maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\n\n    if (isString(mask)) {\n\n        return mask as string;\n\n    } else if (mask instanceof RegExp) {\n\n        return mask.toString();\n\n    } else if (Array.isArray(mask)) {\n\n        return mask.map(value => maskToString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\n\n    if (isString(mask)) {\n\n        let isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\n\n        return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\n\n    } else if (Array.isArray(mask)) {\n\n        return (mask as string[]).map(value => maskFromString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function parseReviver(_key: string, value: any): any {\n\n    let regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|([+\\-])([\\d|:]*))?$/;\n\n    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { maskToString } from \"../../utils/json.utils\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\nimport { Observable, isObservable, of } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\n\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\n\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\n\n    accept?: string;\n    inputType?: string;\n    list?: any[] | Observable<any[]>;\n    mask?: string | RegExp | Function | (string | RegExp)[];\n    max?: number | string | Date;\n    min?: number | string | Date;\n    multiple?: boolean;\n    pattern?: string;\n    step?: number;\n}\n\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\n\n    @serializable() accept: string | null;\n    @serializable() inputType: string;\n    files: FileList | null = null;\n    list$: Observable<any[]> | null = null;\n    @serializable() mask: string | RegExp | Function | (string | RegExp)[] | null;\n    @serializable() max: number | string | Date | null;\n    @serializable() min: number | string | Date | null;\n    @serializable() multiple: boolean | null;\n    @serializable() pattern: string | null;\n    @serializable() step: number | null;\n\n    @serializable(\"list\") private _list: any[] | null = null;\n    private readonly _listId: string | null = null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\n\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = config.accept || null;\n        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\n        this.mask = config.mask || null;\n        this.max = config.max !== undefined ? config.max : null;\n        this.min = config.min !== undefined ? config.min : null;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : null;\n        this.pattern = config.pattern || null;\n        this.step = isNumber(config.step) ? config.step : null;\n\n        if (config.list !== undefined) {\n\n            this.list = config.list;\n            this._listId = `${this.id}List`;\n        }\n    }\n\n    get listId(): string | null {\n        return this._listId;\n    }\n\n    get hasList(): boolean {\n        return isObservable(this.list$);\n    }\n\n    set list(list: any[] | Observable<any[]> | null) {\n\n        if (Array.isArray(list)) {\n\n            this._list = list;\n            this.list$ = of(this._list);\n\n        } else if (isObservable(list)) {\n\n            this.list$ = (list as Observable<any[]>).pipe(tap(list => this._list = list));\n\n        } else {\n\n            this._list = null;\n            this.list$ = null;\n        }\n    }\n\n    toJSON() {\n\n        let json: any = super.toJSON();\n\n        if (this.mask !== null) { \n            if (this.mask instanceof Function) {\n                json.mask = this.mask;\n            } else {\n                json.mask = maskToString(this.mask);\n            }\n        }\n\n        return json;\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n    QueryList,\n    SimpleChange,\n    SimpleChanges,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    DynamicFormControlCustomEvent,\n    DynamicFormControlEvent,\n    DynamicFormControlEventType,\n    isDynamicFormControlEvent\n} from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DynamicInputModel\n} from \"../model/input/dynamic-input.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"../service/dynamic-form-component.service\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormRelationService } from \"../service/dynamic-form-relation.service\";\n\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\n\n    context: DynamicFormArrayGroupModel | null = null;\n    control: FormControl;\n    group: FormGroup;\n    hasFocus: boolean;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    componentViewContainerRef: ViewContainerRef;\n\n    protected componentRef: ComponentRef<DynamicFormControl>;\n    //protected viewRefs: EmbeddedViewRef<DynamicFormControlModel>[] = [];\n    protected componentSubscriptions: Subscription[] = [];\n    protected subscriptions: Subscription[] = [];\n\n    protected constructor(protected componentFactoryResolver: ComponentFactoryResolver,\n                          protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService,\n                          protected componentService: DynamicFormComponentService,\n                          protected relationService: DynamicFormRelationService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        let groupChange = changes[\"group\"] as SimpleChange,\n            modelChange = changes[\"model\"] as SimpleChange;\n\n        if (modelChange) {\n\n            this.destroyFormControlComponent();\n            //this.removeTemplates();\n\n            this.createFormControlComponent();\n            //this.embedTemplates();\n        }\n\n        if (groupChange || modelChange) {\n\n            if (this.model) {\n\n                this.unsubscribe();\n\n                if (this.group) {\n\n                    this.control = this.group.get(this.model.id) as FormControl;\n                    this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\n                }\n\n                this.subscriptions.push(this.model.disabledUpdates.subscribe(value => this.onModelDisabledUpdates(value)));\n\n                if (this.model instanceof DynamicFormValueControlModel) {\n\n                    let model = this.model as DynamicFormValueControlModel<any>;\n\n                    this.subscriptions.push(model.valueUpdates.subscribe(value => this.onModelValueUpdates(value)));\n                }\n\n                if (this.model.relations.length > 0) {\n\n                    this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n\n        this.destroyFormControlComponent();\n        this.unsubscribe();\n    }\n\n    abstract get componentType(): Type<DynamicFormControl> | null;\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasHint(): boolean {\n        return isString((this.model as DynamicFormValueControlModel<any>).hint);\n    }\n\n    get hint(): string | null {\n        return (this.model as DynamicFormValueControlModel<any>).hint || null;\n    }\n\n    get hasLabel(): boolean {\n        return isString(this.model.label);\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    protected createFormControlComponent(): void {\n\n        let componentType = this.componentType;\n\n        if (componentType !== null) {\n\n            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n            this.componentViewContainerRef.clear();\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\n\n            let instance = this.componentRef.instance;\n\n            instance.group = this.group;\n            instance.layout = this.layout;\n            instance.model = this.model as any;\n\n            if (this.templates) {\n                instance.templates = this.templates;\n            }\n\n            this.componentSubscriptions.push(instance.blur.subscribe(($event: any) => this.onBlur($event)));\n            this.componentSubscriptions.push(instance.change.subscribe(($event: any) => this.onChange($event)));\n            this.componentSubscriptions.push(instance.focus.subscribe(($event: any) => this.onFocus($event)));\n\n            if (instance.customEvent !== undefined) {\n                this.componentSubscriptions.push(\n                    instance.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\n            }\n\n            this.registerComponentRef(this.componentRef);\n        }\n    }\n\n    protected destroyFormControlComponent(): void {\n\n        if (this.componentRef) {\n\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n            this.componentSubscriptions = [];\n\n            this.unregisterComponentRef();\n            this.componentRef.destroy();\n        }\n    }\n\n    /*\n    protected embedTemplates(): void {\n\n        const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);\n\n        if (Array.isArray(templates)) {\n\n            templates.forEach(template => {\n\n                const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);\n                this.viewRefs.push(viewRef);\n            });\n        }\n    }\n\n    protected removeTemplates(): void {\n        this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));\n    }\n    */\n\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\n    }\n\n    unsubscribe(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    onControlValueChanges(value: any): void {\n\n        if (this.model instanceof DynamicFormValueControlModel) {\n\n            let model = this.model as DynamicFormValueControlModel<any>;\n\n            if (model.value !== value) {\n                model.valueUpdates.next(value);\n            }\n        }\n    }\n\n    onModelValueUpdates(value: any): void {\n\n        if (this.control.value !== value) {\n            this.control.setValue(value);\n        }\n    }\n\n    onModelDisabledUpdates(value: boolean): void {\n        value ? this.control.disable() : this.control.enable();\n    }\n\n    onChange($event: Event | DynamicFormControlEvent | any): void {\n\n        if ($event && $event instanceof Event) { // native HTML5 change event\n\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n                let model = this.model as DynamicInputModel;\n\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n\n                    let inputElement: any = $event.target || $event.srcElement;\n\n                    model.files = inputElement.files as FileList;\n                }\n            }\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.change.emit($event);\n\n        } else { // custom library value change event\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n        }\n    }\n\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.blur.emit($event);\n\n        } else { // native HTML 5 or UI library blur event\n\n            this.hasFocus = false;\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\n        }\n    }\n\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.focus.emit($event);\n\n        } else { // native HTML 5 or UI library focus event\n\n            this.hasFocus = true;\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\n        }\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\n\n        if (isDynamicFormControlEvent($event)) { // child event bypass\n\n            emitter.emit($event);\n\n        } else { // native UI library custom event\n\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\n        }\n    }\n\n    private registerComponentRef(instanceRef: ComponentRef<DynamicFormControl>): void {\n\n        let index;\n\n        if (this.context && this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.registerFormControlRef(this.model, instanceRef, index);\n    }\n\n    private unregisterComponentRef(): void {\n\n        let index;\n\n        if (this.context && this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.unregisterFormControlRef(this.model.id, index);\n    }\n}\n","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\nimport { DynamicTemplateableFormControl } from \"./dynamic-templateable-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicTemplateableFormControlComponent extends DynamicFormControlComponent implements DynamicTemplateableFormControl, AfterViewInit {\n\n    readonly templateDirectives: Map<string, string>;\n\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    ngAfterViewInit() {\n\n        this.layoutService\n            .filterTemplatesByModel(this.model, this.templates)\n            .forEach(template => this.bindTemplate(template));\n    }\n\n    abstract get viewChild(): any;\n\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\n\n    bindTemplate(template: DynamicTemplateDirective) {\n\n        if (isString(template.as) && this.templateDirectives.has(template.as)) {\n\n            let property = this.templateDirectives.get(template.as) as string;\n\n            this.viewChild[property] = this.mapTemplate(template);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\n\n@Directive({\n    selector: \"[dynamicId]\"\n})\nexport class DynamicIdDirective implements AfterViewInit {\n\n    @Input() dynamicId: string | boolean;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (this.dynamicId) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"id\", this.dynamicId as string);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\nimport { isString } from \"../utils/core.utils\";\n\n@Directive({\n    selector: \"[dynamicList]\"\n})\nexport class DynamicListDirective implements AfterViewInit {\n\n    @Input(\"dynamicList\") listId: string | null;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (isString(this.listId)) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"list\", this.listId as string);\n        }\n    }\n}","import { Directive, Input, TemplateRef } from \"@angular/core\";\n\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT { Start = \"START\", End = \"END\"}\n\n@Directive({\n    selector: \"ng-template[modelId],ng-template[modelType]\"\n})\nexport class DynamicTemplateDirective {\n\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\n    @Input() as: string | null = null;\n    @Input() index: number | undefined;\n    @Input() modelId: string;\n    @Input() modelType: string;\n\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport type DynamicDateControlValue = string | object | Date;\n\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\n\n    format?: string;\n    max?: DynamicDateControlValue;\n    min?: DynamicDateControlValue;\n    placeholder?: string;\n}\n\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\n\n    @serializable() format: string | null;\n    @serializable() max: DynamicDateControlValue | null;\n    @serializable() min: DynamicDateControlValue | null;\n    @serializable() placeholder: string | null;\n\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = config.format || null;\n        this.max = config.max || null;\n        this.min = config.min || null;\n        this.placeholder = config.placeholder || null;\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\n\n    multiple?: boolean;\n}\n\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\n\n    @serializable() multiple: boolean;\n\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n    }\n}","import { Observable, isObservable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFormOptionConfig<T> {\n\n    disabled?: boolean;\n    label?: string;\n    value: T;\n}\n\nexport class DynamicFormOption<T> {\n\n    @serializable() disabled: boolean;\n    @serializable() label: string | null;\n    @serializable() value: T;\n\n    constructor(config: DynamicFormOptionConfig<T>) {\n\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\n        this.label = config.label || null;\n        this.value = config.value;\n    }\n\n    get text() {\n        return this.label;\n    }\n\n    set text(text: string | null) {\n        this.label = text;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\n\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\n}\n\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\n\n    @serializable(\"options\") private _options: DynamicFormOption<T>[] = [];\n    options$: Observable<DynamicFormOption<T>[]>;\n\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.options = config.options;\n    }\n\n    private updateOptions$(): void {\n        this.options$ = of(this.options);\n    }\n\n    set options(options: any) {\n\n        if (Array.isArray(options)) {\n\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => {\n                return new DynamicFormOption<T>(optionConfig);\n            });\n\n            this.updateOptions$();\n\n        } else if (isObservable(options)) {\n\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\n                map(optionsConfig => {\n\n                    let options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n                    this._options = options;\n\n                    return options;\n                }));\n\n        } else {\n\n            this.updateOptions$();\n        }\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n        return this.insert(this.options.length, optionConfig);\n    }\n\n    get(index: number): DynamicFormOption<T> {\n        return this.options[index];\n    }\n\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n\n        let option = new DynamicFormOption(optionConfig);\n\n        this.options.splice(index, 0, option);\n        this.updateOptions$();\n\n        return option;\n    }\n\n    remove(...indices: number[]): void {\n\n        indices.forEach(index => this.options.splice(index, 1));\n        this.updateOptions$();\n    }\n\n    abstract select(...indices: number[]): void;\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\n\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\n\n    group?: DynamicFormModel;\n    legend?: string;\n}\n\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\n\n    @serializable() group: DynamicFormModel = [];\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.group = Array.isArray(config.group) ? config.group : [];\n        this.legend = config.legend || null;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    set(index: number, controlModel: DynamicFormControlModel,): void {\n        this.group[index] = controlModel;\n    }\n\n    add(controlModel: DynamicFormControlModel): void {\n        this.group.push(controlModel);\n    }\n\n    insert(index: number, controlModel: DynamicFormControlModel): void {\n        this.group.splice(index, 0, controlModel);\n    }\n\n    move(index: number, step: number): void {\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\n    }\n\n    remove(index: number) {\n        this.group.splice(index, 1);\n    }\n\n    size(): number {\n        return this.group.length;\n    }\n}\n","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\n\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\n\n    @serializable() group: DynamicCheckboxModel[];\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n        super(config, layout);\n    }\n\n    check(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = true);\n    }\n\n    uncheck(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = false);\n    }\n\n    checkAll(): void {\n        this.group.forEach(model => model.checked = true);\n    }\n\n    uncheckAll(): void {\n        this.group.forEach(model => model.checked = false);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\n\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\n\n    format?: string;\n    inline?: boolean;\n}\n\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\n\n    @serializable() format: string | null;\n    @serializable() inline: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\n\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = isString(config.format) ? config.format : null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n    }\n}","import {\n    DynamicDateControlModel,\n    DynamicDateControlModelConfig,\n    DynamicDateControlValue\n} from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\n\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\n\n    autoFocus?: boolean;\n    focusedDate?: DynamicDateControlValue;\n    inline?: boolean;\n    prefix?: string;\n    readOnly?: boolean;\n    suffix?: string;\n    toggleIcon?: string;\n    toggleLabel?: string;\n}\n\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\n\n    @serializable() autoFocus: boolean;\n    @serializable() focusedDate: DynamicDateControlValue | null;\n    @serializable() inline: boolean;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() suffix: string | null;\n    @serializable() toggleIcon: string | null;\n    @serializable() toggleLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\n\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.focusedDate = config.focusedDate || null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;\n        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;\n        this.suffix = config.suffix || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\n\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\n}\n\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\n\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n    }\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\n\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\n\n    accept?: string[];\n    autoUpload?: boolean;\n    maxSize?: number;\n    minSize?: number;\n    removeUrl?: string;\n    showFileList?: boolean;\n    url?: string;\n}\n\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\n\n    @serializable() accept: string[] | null;\n    @serializable() autoUpload: boolean;\n    @serializable() maxSize: number | null;\n    @serializable() minSize: number | null;\n    @serializable() removeUrl: string | null;\n    @serializable() showFileList: boolean;\n    @serializable() url: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\n\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\n        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;\n        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;\n        this.minSize = isNumber(config.minSize) ? config.minSize : null;\n        this.removeUrl = config.removeUrl || null;\n        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;\n        this.url = config.url || null;\n    }\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\n\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    legend?: string;\n}\n\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.legend = config.legend || null;\n    }\n\n    select(index: number): void {\n        this.valueUpdates.next(this.get(index).value);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\n\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n}\n\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\n\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n    }\n}","import { ÉµlooseIdentical as looseIdentical } from \"@angular/core\";\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isFunction } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    compareWithFn?: (o1: any, o2: any) => boolean;\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    prefix?: string;\n    suffix?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    compareWithFn: (o1: any, o2: any) => boolean;\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() suffix: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;\n        this.filterable = isBoolean(config.filterable) ? config.filterable : false;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.suffix = config.suffix || null;\n    }\n\n    select(...indices: number[]): void {\n\n        let value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n\n        this.valueUpdates.next(value);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\n\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n    min?: number;\n    step?: number;\n    vertical?: boolean;\n}\n\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n    @serializable() min: number | null;\n    @serializable() step: number | null;\n    @serializable() vertical: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\n\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n        this.min = isNumber(config.min) ? config.min : 0;\n        this.step = isNumber(config.step) ? config.step : 1;\n        this.vertical = isBoolean(config.vertical) ? config.vertical : false;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\n\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\n\n    offLabel?: string;\n    onLabel?: string;\n}\n\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\n\n    @serializable() offLabel: string | null;\n    @serializable() onLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.offLabel = config.offLabel || null;\n        this.onLabel = config.onLabel || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\n\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\n\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\n\n    cols?: number;\n    rows?: number;\n    wrap?: string;\n}\n\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\n\n    @serializable() cols: number;\n    @serializable() rows: number;\n    @serializable() wrap: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\n\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.cols = isNumber(config.cols) ? config.cols : 20;\n        this.rows = isNumber(config.rows) ? config.rows : 2;\n        this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\n    }\n}","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\n\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\n\n    meridian?: boolean;\n    showSeconds?: boolean;\n}\n\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\n\n    @serializable() meridian: boolean;\n    @serializable() showSeconds: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\n\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.meridian = isBoolean(config.meridian) ? config.meridian : false;\n        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;\n    }\n}","import { InjectionToken } from \"@angular/core\";\nimport { AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\n\nexport type Validator = ValidatorFn | AsyncValidatorFn;\n\nexport type ValidatorFactory = (args: any) => Validator;\n\nexport type ValidatorsToken = Validator[];\n\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\n\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\n","import { Injectable, Inject, Optional } from \"@angular/core\";\nimport {\n    AbstractControl,\n    AsyncValidatorFn,\n    ValidatorFn,\n    Validators,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicValidatorDescriptor,\n    DynamicValidatorsConfig\n} from \"../model/misc/dynamic-form-control-validation.model\";\nimport { isObject, isString } from \"../utils/core.utils\";\nimport { DYNAMIC_VALIDATORS, Validator, ValidatorFactory, ValidatorsToken } from \"./dynamic-form.validators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormValidationService {\n\n    constructor(@Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: ValidatorFn[],\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>) {}\n\n\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\n                           validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator | never {\n\n        let validatorFn: ValidatorFactory | Validator | undefined;\n\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\n\n            validatorFn = (Validators as any)[validatorName];\n\n        } else { // Custom Validators\n\n            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {\n                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);\n\n            } else if (validatorsToken) {\n                validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\n            }\n        }\n\n        if (validatorFn === undefined) { // throw when no validator could be resolved\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\n        }\n\n        if (validatorArgs !== null) {\n            return (validatorFn as ValidatorFactory)(validatorArgs);\n        }\n\n        return validatorFn as Validator;\n    }\n\n\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\n                            validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator[] {\n\n        let validatorFns: Validator[] = [];\n\n        if (isObject(validatorsConfig)) {\n\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\n\n                let validatorConfigValue = (validatorsConfig as DynamicValidatorsConfig)[validatorConfigKey];\n\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\n\n                    let descriptor = validatorConfigValue as DynamicValidatorDescriptor;\n\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\n                }\n\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\n            });\n        }\n\n        return validatorFns;\n    }\n\n\n    private parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\n\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\n\n            let propertySource: any = model,\n                propertyName: string = expression;\n\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\n\n                propertySource = error;\n                propertyName = expression.replace(\"validator.\", \"\");\n            }\n\n            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?\n                propertySource[propertyName] : null;\n        });\n    }\n\n\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\n    }\n\n\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\n    }\n\n\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\n    }\n\n\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\n        return this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\n    }\n\n\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                     model: DynamicFormControlModel): void {\n\n        model.validators = validatorsConfig;\n\n        if (validatorsConfig === null) {\n\n            control.clearValidators();\n\n        } else {\n            control.setValidators(this.getValidators(validatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                          model: DynamicFormControlModel): void {\n\n        model.asyncValidators = asyncValidatorsConfig;\n\n        if (asyncValidatorsConfig === null) {\n\n            control.clearAsyncValidators();\n\n        } else {\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\n\n        let messages: string[] = [];\n\n        if (model.hasErrorMessages) {\n\n            let messagesConfig = model.errorMessages as DynamicValidatorsConfig;\n\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\n\n                let messageKey = validationErrorKey;\n\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\n                    messageKey = messageKey.replace(\"length\", \"Length\");\n                }\n\n                if (messagesConfig.hasOwnProperty(messageKey)) {\n\n                    let validationError = control.getError(validationErrorKey),\n                        messageTemplate = messagesConfig[messageKey] as string;\n\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\n                }\n            });\n        }\n\n        return messages;\n    }\n\n\n    isFormHook(value: any): boolean {\n        return isString(value) && [\"blur\", \"change\", \"submit\"].indexOf(value) !== -1;\n    }\n\n\n    isValidatorDescriptor(value: any): boolean {\n\n        if (isObject(value)) {\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\n        }\n\n        return false;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\nimport { AbstractControlOptions } from \"@angular/forms\";\nimport { DynamicFormControlModel, FormHooks } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DynamicColorPickerModel\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DynamicDatePickerModel\n} from \"../model/datepicker/dynamic-datepicker.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\n    DynamicFileUploadModel\n} from \"../model/file-upload/dynamic-file-upload.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DynamicRadioGroupModel\n} from \"../model/radio/dynamic-radio-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicTimePickerModel\n} from \"../model/timepicker/dynamic-timepicker.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { DynamicFormModel, DynamicUnionFormModel } from \"../model/dynamic-form.model\";\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { maskFromString, parseReviver } from \"../utils/json.utils\";\nimport { isString } from \"../utils/core.utils\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormService {\n\n    constructor(private validationService: DynamicFormValidationService) {}\n\n\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\n                                         updateOn: FormHooks | null = null): AbstractControlOptions {\n\n        return {\n\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\n\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\n\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : \"change\"\n        };\n    }\n\n\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\n\n        let controls: AbstractControl[] = [],\n            options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\n                formArrayModel.updateOn);\n\n        for (let index = 0; index < formArrayModel.size; index++) {\n\n            let groupModel = formArrayModel.get(index),\n                groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\n                    formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\n\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\n        }\n\n        return new FormArray(controls, options);\n    }\n\n\n    createFormGroup(formModel: DynamicFormModel, options: AbstractControlOptions | null = null,\n                    parent: DynamicPathable | null = null): FormGroup {\n\n        let controls: { [controlId: string]: AbstractControl; } = {};\n\n        formModel.forEach(model => {\n\n            model.parent = parent;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n\n                    let groupModel = model as DynamicFormGroupModel,\n                        groupOptions = this.createAbstractControlOptions(groupModel.validators,\n                            groupModel.asyncValidators, groupModel.updateOn);\n\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\n                    break;\n\n                default:\n\n                    let controlModel = model as DynamicFormValueControlModel<any>,\n                        controlState = {value: controlModel.value, disabled: controlModel.disabled},\n                        controlOptions = this.createAbstractControlOptions(controlModel.validators,\n                            controlModel.asyncValidators, controlModel.updateOn);\n\n                    controls[model.id] = new FormControl(controlState, controlOptions);\n            }\n        });\n\n        return new FormGroup(controls, options);\n    }\n\n\n    getPathSegment(model: DynamicPathable): string {\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\n    }\n\n\n    getPath(model: DynamicPathable, join: boolean = false): string[] | string {\n\n        let path = [this.getPathSegment(model)],\n            parent = model.parent;\n\n        while (parent) {\n\n            path.unshift(this.getPathSegment(parent));\n            parent = parent.parent;\n        }\n\n        return join ? path.join(\".\") : path;\n    }\n\n\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicUnionFormModel, ...models: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            this.insertFormGroupControl(_formModel.length, formGroup, _formModel, ...models);\n        }\n    }\n\n\n    moveFormGroupControl(index: number, step: number, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formModel.move(index, step);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            _formModel.splice(index + step, 0, ..._formModel.splice(index, 1));\n        }\n    }\n\n\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel,\n                           ...models: DynamicFormModel): void {\n\n        let parent = formModel instanceof DynamicFormGroupModel ? formModel : null,\n            controls = this.createFormGroup(models, null, parent).controls;\n\n        Object.keys(controls).forEach((controlName, idx) => {\n\n            let controlModel = models[idx];\n\n            if (formModel instanceof DynamicFormGroupModel) {\n                formModel.insert(index, controlModel);\n\n            } else {\n                (formModel as DynamicFormModel).splice(index, 0, controlModel);\n            }\n\n            formGroup.addControl(controlName, controls[controlName]);\n        });\n    }\n\n\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formGroup.removeControl(formModel.get(index).id);\n            formModel.remove(index);\n\n        } else {\n\n            formGroup.removeControl(formModel[index].id);\n            (formModel as DynamicFormModel).splice(index, 1);\n        }\n    }\n\n\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.addGroup();\n\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.insertGroup(index);\n\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let newIndex = index + step,\n            moveUp = step >= 0;\n\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\n\n            let movingGroups: AbstractControl[] = [];\n\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\n                movingGroups.push(formArray.at(i));\n            }\n\n            movingGroups.forEach((formControl, idx) => {\n\n                let position;\n\n                if (moveUp) {\n                    position = idx === 0 ? newIndex : index + idx - 1;\n\n                } else {\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\n                }\n\n                formArray.setControl(position, formControl);\n            });\n\n            formArrayModel.moveGroup(index, step);\n\n        } else {\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\n        }\n    }\n\n\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        formArrayModel.removeGroup(index);\n    }\n\n\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.clear();\n        formArrayModel.clear();\n    }\n\n\n    findById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n\n        let result = null,\n            findByIdFn = (id: string, groupModel: DynamicFormModel): void => {\n\n                for (let controlModel of groupModel) {\n\n                    if (controlModel.id === id) {\n                        result = controlModel;\n                        break;\n                    }\n\n                    if (controlModel instanceof DynamicFormGroupModel) {\n                        findByIdFn(id, (controlModel as DynamicFormGroupModel).group);\n                    }\n                }\n            };\n\n        findByIdFn(id, formModel);\n\n        return result;\n    }\n\n\n    findModelById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n        return this.findById(id, formModel);\n    }\n\n\n    findControlByModel(model: DynamicFormControlModel, group: FormGroup): AbstractControl | null {\n        return group.root.get(this.getPath(model, true));\n    }\n\n\n    fromJSON(json: string | object[]): DynamicFormModel | never {\n\n        let formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json,\n            formModel: DynamicFormModel = [];\n\n        formModelJSON.forEach((model: any) => {\n\n            let layout = model.layout || null;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    let formArrayModel = model as DynamicFormArrayModel;\n\n                    if (Array.isArray(formArrayModel.groups)) {\n\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormModel;\n                        });\n                    }\n\n                    formArrayModel.groupFactory = () => {\n                        return this.fromJSON(formArrayModel.groupPrototype);\n                    };\n\n                    formModel.push(new DynamicFormArrayModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                    formModel.push(new DynamicColorPickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                    formModel.push(new DynamicDatePickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                    formModel.push(new DynamicEditorModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\n                    model.value = null;\n                    formModel.push(new DynamicFileUploadModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    model.group = this.fromJSON(model.group);\n                    formModel.push(new DynamicFormGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    let inputModel = model as DynamicInputModel;\n\n                    if (inputModel.mask !== null) {\n                        if (!(inputModel.mask instanceof Function)) {\n                            inputModel.mask = maskFromString(inputModel.mask as string);\n                        }\n                    }\n\n                    formModel.push(new DynamicInputModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                    formModel.push(new DynamicRatingModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                    formModel.push(new DynamicTimePickerModel(model, layout));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\n            }\n        });\n\n        return formModel;\n    }\n}\n","import { ComponentRef, Inject, Injectable, InjectionToken, Optional, Type } from \"@angular/core\";\nimport { DynamicFormControl } from \"../component/dynamic-form-control.interface\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { isFunction, isNumber } from \"../utils/core.utils\";\n\nexport type DynamicFormControlRef = ComponentRef<DynamicFormControl>;\n\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\n\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormComponentService {\n\n    private componentRefs: { [key: string]: DynamicFormControlRef | DynamicFormControlRef[] } = {};\n\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\n    }\n\n    getFormControlRef(modelId: string, index?: number): DynamicFormControlRef | undefined {\n\n        const ref: DynamicFormControlRef | DynamicFormControlRef[] = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            return Array.isArray(ref) ? ref[index] : undefined;\n\n        } else {\n            return ref as DynamicFormControlRef;\n        }\n    }\n\n    registerFormControlRef(model: DynamicFormControlModel, instance: DynamicFormControlRef, index?: number): void {\n\n        if (isNumber(index)) {\n\n            const arrayRef: DynamicFormControlRef[] = this.componentRefs[model.id] as DynamicFormControlRef[] || [];\n\n            if (Array.isArray(arrayRef)) {\n\n                arrayRef.splice(index, 0, instance);\n                this.componentRefs[model.id] = arrayRef;\n\n            } else {\n                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);\n            }\n\n        } else {\n            this.componentRefs[model.id] = instance;\n        }\n\n    }\n\n    unregisterFormControlRef(modelId: string, index?: number): void {\n\n        const componentRef = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {\n                componentRef.splice(index, 1);\n            }\n\n        } else if (componentRef !== undefined) {\n            delete this.componentRefs[modelId];\n        }\n    }\n\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;\n    }\n}\n","import { Injectable, QueryList } from \"@angular/core\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutConfig,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport {\n    DynamicTemplateDirective,\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\n} from \"../directive/dynamic-template.directive\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\n\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormLayoutService {\n\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                if (key === id) {\n                    return formLayout[key];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    findByModel(model: DynamicFormControlModel, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        let controlLayout: DynamicFormControlLayout = null;\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                key.split(\",\").forEach(substring => {\n\n                    const selector = substring.trim();\n\n                    if (selector === model.id || selector === model.type) {\n                        controlLayout = formLayout[key];\n                    }\n                });\n            }\n        }\n\n        return controlLayout;\n    }\n\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\n\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\n            return template.modelId === model.id || template.modelType === model.type;\n        };\n\n        if (templates instanceof QueryList) {\n            return templates.filter(filterCallback);\n\n        } else if (Array.isArray(templates)) {\n            return templates.filter(filterCallback);\n        }\n\n        return [];\n    }\n\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates, alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\n\n        return this.filterTemplatesByModel(model, templates)\n            .find(template => template.as === null && template.align === alignment);\n    }\n\n    /*\n    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {\n        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);\n    }\n    */\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\n    }\n\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\n    }\n\n    getClass(layout: DynamicFormControlLayout | null, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        if (layout !== null && layout.hasOwnProperty(context)) {\n\n            let config = layout[context] as DynamicFormControlLayoutConfig;\n\n            if (config.hasOwnProperty(place)) {\n                return config[place] as string;\n            }\n        }\n\n        return \"\";\n    }\n\n    getElementId(model: DynamicFormControlModel): string {\n\n        let id = model.id, parent = model.parent;\n\n        while (parent !== null) {\n\n            if (parent instanceof DynamicFormArrayGroupModel) {\n\n                id = `${parent.context.id}-${parent.index}-${model.id}`;\n                break;\n            }\n\n            parent = parent.parent;\n        }\n\n        return id;\n    }\n}\n","import { InjectionToken, Injector, ValueProvider } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport {\n    MATCH_DISABLED,\n    MATCH_ENABLED,\n    MATCH_HIDDEN,\n    MATCH_OPTIONAL,\n    MATCH_REQUIRED,\n    MATCH_VISIBLE\n} from \"../model/misc/dynamic-form-control-relation.model\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport interface DynamicFormControlMatcher {\n\n    match: string;\n    opposingMatch: string | null;\n\n    onChange(hasMatch: boolean, model: DynamicFormControlModel, control: FormControl, injector: Injector): void;\n}\n\nexport const DYNAMIC_MATCHERS = new InjectionToken<DynamicFormControlMatcher>(\"DYNAMIC_MATCHERS\");\n\nexport const DisabledMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_DISABLED,\n    opposingMatch: MATCH_ENABLED,\n    onChange(hasMatch: boolean, model: DynamicFormControlModel): void {\n        model.disabledUpdates.next(hasMatch);\n    }\n};\n\nexport const HiddenMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_HIDDEN,\n    opposingMatch: MATCH_VISIBLE,\n    onChange(hasMatch: boolean, model: DynamicFormControlModel): void {\n        model.hidden = hasMatch;\n    }\n};\n\nexport const RequiredMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_REQUIRED,\n    opposingMatch: MATCH_OPTIONAL,\n    onChange(hasMatch: boolean, model: DynamicFormControlModel, control: FormControl, injector: Injector): void {\n\n        let validatorsConfig = null;\n\n        if (hasMatch) {\n\n            validatorsConfig = isObject(model.validators) ? {...model.validators, required: null} : {required: null};\n\n        } else {\n\n            if (isObject(model.validators)) {\n\n                delete model.validators[\"required\"];\n                validatorsConfig = {...model.validators};\n            }\n        }\n\n        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);\n    }\n};\n\nexport const DISABLED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: DisabledMatcher,\n    multi: true\n};\n\nexport const HIDDEN_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: HiddenMatcher,\n    multi: true\n};\n\nexport const REQUIRED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: RequiredMatcher,\n    multi: true\n};\n","export const MATCH_DISABLED = \"DISABLED\";\nexport const MATCH_ENABLED = \"ENABLED\";\nexport const MATCH_HIDDEN = \"HIDDEN\";\nexport const MATCH_OPTIONAL = \"OPTIONAL\";\nexport const MATCH_REQUIRED = \"REQUIRED\";\nexport const MATCH_VISIBLE = \"VISIBLE\";\n\nexport const AND_OPERATOR = \"AND\";\nexport const OR_OPERATOR = \"OR\";\n\nexport interface DynamicFormControlCondition {\n\n    id?: string;\n    rootPath?: string;\n    status?: string;\n    value?: any;\n}\n\nexport interface DynamicFormControlRelation {\n\n    match: string;\n    operator?: string;\n    when: DynamicFormControlCondition[];\n}\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DYNAMIC_MATCHERS, DynamicFormControlMatcher } from \"./dynamic-form-relation.matchers\";\nimport {\n    AND_OPERATOR,\n    DynamicFormControlCondition,\n    DynamicFormControlRelation,\n    OR_OPERATOR\n} from \"../model/misc/dynamic-form-control-relation.model\";\nimport { startWith } from \"rxjs/operators\";\nimport { merge, Subscription } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormRelationService {\n\n    constructor(@Optional() @Inject(DYNAMIC_MATCHERS) private DYNAMIC_MATCHERS: DynamicFormControlMatcher[],\n                private injector: Injector) {}\n\n    getRelatedFormControl(group: FormGroup, condition: DynamicFormControlCondition): FormControl | never {\n\n        const control = condition.rootPath ?\n            group.root.get(condition.rootPath) as FormControl : group.get(condition.id) as FormControl;\n\n        if (control === null) {\n            throw new Error(`No related form control with id ${condition.id} could be found`);\n        }\n\n        return control;\n    }\n\n    getRelatedFormControls(model: DynamicFormControlModel, group: FormGroup): { [id: string]: FormControl } | never {\n\n        const controls: { [id: string]: FormControl } = {};\n\n        model.relations.forEach(relation => relation.when.forEach(condition => {\n\n            if (model.id === condition.id) {\n                throw new Error(`FormControl ${model.id} cannot depend on itself`);\n            }\n\n            const control = this.getRelatedFormControl(group, condition);\n\n            if (control && !controls.hasOwnProperty(model.id)) {\n                controls[condition.id] = control;\n            }\n        }));\n\n        return controls;\n    }\n\n    findRelation(relations: DynamicFormControlRelation[], matcher: DynamicFormControlMatcher): DynamicFormControlRelation | null {\n        return relations.find(relation => relation.match === matcher.match || relation.match === matcher.opposingMatch) || null;\n    }\n\n    matchesCondition(relation: DynamicFormControlRelation, group: FormGroup, matcher: DynamicFormControlMatcher): boolean {\n\n        const operator = relation.operator || OR_OPERATOR;\n\n        return relation.when.reduce((hasAlreadyMatched: boolean, condition: DynamicFormControlCondition, index: number) => {\n\n            const relatedControl = this.getRelatedFormControl(group, condition);\n\n            if (relatedControl && relation.match === matcher.match) {\n\n                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                return condition.value === relatedControl.value || condition.status === relatedControl.status;\n            }\n\n            if (relatedControl && relation.match === matcher.opposingMatch) {\n\n                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                return !(condition.value === relatedControl.value || condition.status === relatedControl.status);\n            }\n\n            return false;\n\n        }, false);\n    }\n\n    subscribeRelations(model: DynamicFormControlModel, group: FormGroup, control: FormControl): Subscription[] {\n\n        const relatedFormControls = this.getRelatedFormControls(model, group), subscriptions: Subscription[] = [];\n\n        Object.entries(relatedFormControls).forEach(([_id, relatedControl]) => {\n\n            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));\n            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));\n\n            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {\n\n                if (Array.isArray(this.DYNAMIC_MATCHERS)) {\n\n                    this.DYNAMIC_MATCHERS.forEach(matcher => {\n\n                        const relation = this.findRelation(model.relations, matcher);\n\n                        if (relation) {\n\n                            const hasMatch = this.matchesCondition(relation, group, matcher);\n                            matcher.onChange(hasMatch, model, control, this.injector);\n                        }\n                    });\n                }\n            }));\n        });\n\n        return subscriptions;\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicIdDirective } from \"./directive/dynamic-id.directive\";\nimport { DynamicListDirective } from \"./directive/dynamic-list.directive\";\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"./service/dynamic-form.service\";\nimport { DynamicFormLayoutService } from \"./service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"./service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"./service/dynamic-form-component.service\";\nimport { DynamicFormRelationService } from \"./service/dynamic-form-relation.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ],\n    exports: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ]\n})\nexport class DynamicFormsCoreModule {\n\n    /*@deprecated*/\n    static forRoot(): ModuleWithProviders {\n\n        return {\n            ngModule: DynamicFormsCoreModule,\n            providers: [\n                DynamicFormService,\n                DynamicFormLayoutService,\n                DynamicFormValidationService,\n                DynamicFormComponentService,\n                DynamicFormRelationService\n            ]\n        };\n    }\n}\n"]}