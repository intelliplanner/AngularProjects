/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_LABEL_GLOBAL_OPTIONS } from "@angular/material/core";
import { MatDatepicker } from "@angular/material/datepicker";
import { MatInput } from "@angular/material/input";
import { DynamicDatePickerModel, DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService } from "@ng-dynamic-forms/core";
var DynamicMaterialDatePickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicMaterialDatePickerComponent, _super);
    function DynamicMaterialDatePickerComponent(layoutService, validationService, LABEL_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialDatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-datepicker",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [max]=\"model.max\"\n           [matDatepicker]=\"matDatepicker\"\n           [min]=\"model.min\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           (blur)=\"onBlur($event)\"\n           (dateChange)=\"onChange($event)\"\n           (dateInput)=\"onCustomEvent($event, 'dateInput')\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]=\"model.getAdditional('opened', false)\"\n                    [startAt]=\"model.focusedDate\"\n                    [startView]=\"model.getAdditional('startView', 'month')\"\n                    [touchUi]=\"model.getAdditional('touchUi', false)\"\n                    (closed)=\"onCustomEvent($event, 'closed')\"\n                    (monthSelected)=\"onCustomEvent($event, 'monthSelected')\"\n                    (opened)=\"onCustomEvent($event, 'opened')\"\n                    (yearSelected)=\"onCustomEvent($event, 'yearSelected')\"></mat-datepicker>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialDatePickerComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialDatePickerComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matDatePicker: [{ type: ViewChild, args: ["matDatepicker", { static: true },] }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialDatePickerComponent;
}(DynamicFormControlComponent));
export { DynamicMaterialDatePickerComponent };
if (false) {
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matDatePicker;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matInput;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialDatePickerComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialDatePickerComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.LABEL_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tYXRlcmlhbC1kYXRlcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL3VpLW1hdGVyaWFsLyIsInNvdXJjZXMiOlsibGliL2RhdGVwaWNrZXIvZHluYW1pYy1tYXRlcmlhbC1kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBZ0Isd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ25ELE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsMkJBQTJCLEVBRzNCLHdCQUF3QixFQUN4Qiw0QkFBNEIsRUFDL0IsTUFBTSx3QkFBd0IsQ0FBQztBQUVoQztJQUl3RCw4REFBMkI7SUFjL0UsNENBQXNCLGFBQXVDLEVBQ3ZDLGlCQUErQyxFQUNKLGFBQTJCO1FBRjVGLFlBSUksa0JBQU0sYUFBYSxFQUFFLGlCQUFpQixDQUFDLFNBQzFDO1FBTHFCLG1CQUFhLEdBQWIsYUFBYSxDQUEwQjtRQUN2Qyx1QkFBaUIsR0FBakIsaUJBQWlCLENBQThCO1FBQ0osbUJBQWEsR0FBYixhQUFhLENBQWM7UUFWbEYsVUFBSSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdDLFlBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQyxpQkFBVyxHQUFnRCxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlFLFdBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFVeEQsQ0FBQzs7Z0JBdkJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QywwekVBQTJEO2lCQUM5RDs7OztnQkFQRyx3QkFBd0I7Z0JBQ3hCLDRCQUE0QjtnREF1QmYsTUFBTSxTQUFDLHdCQUF3QixjQUFHLFFBQVE7Ozt3QkFkdEQsS0FBSzt5QkFDTCxLQUFLO3dCQUNMLEtBQUs7dUJBRUwsTUFBTTt5QkFDTixNQUFNOzhCQUNOLE1BQU07d0JBQ04sTUFBTTtnQ0FFTixTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTsyQkFDM0MsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBUXpDLHlDQUFDO0NBQUEsQUF4QkQsQ0FJd0QsMkJBQTJCLEdBb0JsRjtTQXBCWSxrQ0FBa0M7OztJQUUzQyxtREFBMEI7O0lBQzFCLG9EQUFtQzs7SUFDbkMsbURBQXVDOztJQUV2QyxrREFBdUQ7O0lBQ3ZELG9EQUF5RDs7SUFDekQseURBQXdGOztJQUN4RixtREFBd0Q7O0lBRXhELDJEQUFnRjs7SUFDaEYsc0RBQTBEOzs7OztJQUU5QywyREFBaUQ7Ozs7O0lBQ2pELCtEQUF5RDs7SUFDekQsMkRBQWdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IExhYmVsT3B0aW9ucywgTUFUX0xBQkVMX0dMT0JBTF9PUFRJT05TIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcbmltcG9ydCB7IE1hdERhdGVwaWNrZXIgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvZGF0ZXBpY2tlclwiO1xuaW1wb3J0IHsgTWF0SW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXRcIjtcbmltcG9ydCB7XG4gICAgRHluYW1pY0RhdGVQaWNrZXJNb2RlbCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQsXG4gICAgRHluYW1pY0Zvcm1Db250cm9sQ3VzdG9tRXZlbnQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgIER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2Vcbn0gZnJvbSBcIkBuZy1keW5hbWljLWZvcm1zL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiZHluYW1pYy1tYXRlcmlhbC1kYXRlcGlja2VyXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9keW5hbWljLW1hdGVyaWFsLWRhdGVwaWNrZXIuY29tcG9uZW50Lmh0bWxcIlxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTWF0ZXJpYWxEYXRlUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpIGdyb3VwOiBGb3JtR3JvdXA7XG4gICAgQElucHV0KCkgbGF5b3V0OiBEeW5hbWljRm9ybUxheW91dDtcbiAgICBASW5wdXQoKSBtb2RlbDogRHluYW1pY0RhdGVQaWNrZXJNb2RlbDtcblxuICAgIEBPdXRwdXQoKSBibHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY3VzdG9tRXZlbnQ6IEV2ZW50RW1pdHRlcjxEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBWaWV3Q2hpbGQoXCJtYXREYXRlcGlja2VyXCIsIHsgc3RhdGljOiB0cnVlIH0pIG1hdERhdGVQaWNrZXI6IE1hdERhdGVwaWNrZXI8YW55PjtcbiAgICBAVmlld0NoaWxkKE1hdElucHV0LCB7IHN0YXRpYzogdHJ1ZSB9KSBtYXRJbnB1dDogTWF0SW5wdXQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbGF5b3V0U2VydmljZTogRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2YWxpZGF0aW9uU2VydmljZTogRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE1BVF9MQUJFTF9HTE9CQUxfT1BUSU9OUykgQE9wdGlvbmFsKCkgcHVibGljIExBQkVMX09QVElPTlM6IExhYmVsT3B0aW9ucykge1xuXG4gICAgICAgIHN1cGVyKGxheW91dFNlcnZpY2UsIHZhbGlkYXRpb25TZXJ2aWNlKTtcbiAgICB9XG59Il19