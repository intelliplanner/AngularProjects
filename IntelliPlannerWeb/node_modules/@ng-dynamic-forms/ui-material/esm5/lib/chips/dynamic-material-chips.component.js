/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete } from "@angular/material/autocomplete";
import { MAT_CHIPS_DEFAULT_OPTIONS, MatChipList } from "@angular/material/chips";
import { MAT_LABEL_GLOBAL_OPTIONS, MAT_RIPPLE_GLOBAL_OPTIONS } from "@angular/material/core";
import { MatInput } from "@angular/material/input";
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicInputModel } from "@ng-dynamic-forms/core";
var DynamicMaterialChipsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicMaterialChipsComponent, _super);
    function DynamicMaterialChipsComponent(layoutService, validationService, AUTOCOMPLETE_OPTIONS, CHIPS_OPTIONS, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.AUTOCOMPLETE_OPTIONS = AUTOCOMPLETE_OPTIONS;
        _this.CHIPS_OPTIONS = CHIPS_OPTIONS;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    Object.defineProperty(DynamicMaterialChipsComponent.prototype, "chips", {
        get: /**
         * @return {?}
         */
        function () {
            return Array.isArray(this.model.value) ? (/** @type {?} */ (this.model.value)) : [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipInputTokenEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var inputElement = $event.input;
        /** @type {?} */
        var inputValue = $event.value.trim();
        if (inputValue.length > 0) {
            this.control.patchValue(tslib_1.__spread(this.chips, [inputValue]));
            this.onChange($event);
        }
        if (inputElement instanceof HTMLInputElement) {
            inputElement.value = "";
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var selectedChip = $event.option.value;
        /** @type {?} */
        var chips = this.chips;
        if (!chips.includes(selectedChip)) {
            this.control.patchValue(tslib_1.__spread(this.chips, [selectedChip]));
        }
    };
    /**
     * @param {?} chip
     * @param {?} index
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipRemoved = /**
     * @param {?} chip
     * @param {?} index
     * @return {?}
     */
    function (chip, index) {
        /** @type {?} */
        var chips = this.chips;
        if (chips[index] === chip) {
            chips.splice(index, 1);
            this.control.patchValue(tslib_1.__spread(chips));
        }
    };
    DynamicMaterialChipsComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-chips",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <mat-chip-list #matChipList [formControlName]=\"model.id\" [id]=\"elementId\" [multiple]=\"true\">\n\n        <mat-chip *ngFor=\"let chip of chips; let index = index\"\n                  [selectable]=\"false\"\n                  (removed)=\"onChipRemoved(chip, index)\">\n\n            <span>{{ chip }}</span>\n\n            <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n\n        <input matInput\n               [matAutocomplete]=\"matAutocomplete\"\n               [matChipInputAddOnBlur]=\"model.getAdditional('matChipInputAddOnBlur', true)\"\n               [matChipInputFor]=\"matChipList\"\n               [matChipInputSeparatorKeyCodes]=\"model.getAdditional('matChipInputSeparatorKeyCodes', CHIPS_OPTIONS['separatorKeyCodes'])\"\n               [placeholder]=\"model.placeholder\"\n               (matChipInputTokenEnd)=\"onChipInputTokenEnd($event)\"\n               (blur)=\"onBlur($event)\"\n               (focus)=\"onFocus($event)\"/>\n\n        <mat-autocomplete #matAutocomplete=\"matAutocomplete\"\n                          [autoActiveFirstOption]=\"model.getAdditional('autoActiveFirstOption', AUTOCOMPLETE_OPTIONS['autoActiveFirstOption'])\"\n                          [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                          [displayWith]=\"model.getAdditional('displayWith', null)\"\n                          (optionSelected)=\"onChipSelected($event)\">\n\n            <mat-option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">{{ option }}</mat-option>\n\n        </mat-autocomplete>\n\n    </mat-chip-list>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialChipsComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialChipsComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matAutocomplete: [{ type: ViewChild, args: ["matAutocomplete", { static: true },] }],
        matChipList: [{ type: ViewChild, args: ["matChipList", { static: true },] }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialChipsComponent;
}(DynamicFormControlComponent));
export { DynamicMaterialChipsComponent };
if (false) {
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.matAutocomplete;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.matChipList;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.matInput;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialChipsComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialChipsComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.AUTOCOMPLETE_OPTIONS;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.CHIPS_OPTIONS;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.LABEL_OPTIONS;
    /** @type {?} */
    DynamicMaterialChipsComponent.prototype.RIPPLE_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tYXRlcmlhbC1jaGlwcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctZHluYW1pYy1mb3Jtcy91aS1tYXRlcmlhbC8iLCJzb3VyY2VzIjpbImxpYi9jaGlwcy9keW5hbWljLW1hdGVyaWFsLWNoaXBzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxnQ0FBZ0MsRUFDaEMsZUFBZSxFQUdsQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFDSCx5QkFBeUIsRUFFekIsV0FBVyxFQUVkLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUVILHdCQUF3QixFQUN4Qix5QkFBeUIsRUFFNUIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUNILDJCQUEyQixFQUczQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLGlCQUFpQixFQUNwQixNQUFNLHdCQUF3QixDQUFDO0FBRWhDO0lBSW1ELHlEQUEyQjtJQWUxRSx1Q0FBc0IsYUFBdUMsRUFDdkMsaUJBQStDLEVBQ1Isb0JBQW1ELEVBQzFELGFBQXFDLEVBQzFCLGFBQTJCLEVBQzFCLGNBQW1DO1FBTHJHLFlBT0ksa0JBQU0sYUFBYSxFQUFFLGlCQUFpQixDQUFDLFNBQzFDO1FBUnFCLG1CQUFhLEdBQWIsYUFBYSxDQUEwQjtRQUN2Qyx1QkFBaUIsR0FBakIsaUJBQWlCLENBQThCO1FBQ1IsMEJBQW9CLEdBQXBCLG9CQUFvQixDQUErQjtRQUMxRCxtQkFBYSxHQUFiLGFBQWEsQ0FB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Qyw2Q0FBdUQ7O0lBQ3ZELCtDQUF5RDs7SUFDekQsb0RBQXdGOztJQUN4Riw4Q0FBd0Q7O0lBRXhELHdEQUErRTs7SUFDL0Usb0RBQW1FOztJQUNuRSxpREFBd0Q7Ozs7O0lBRTVDLHNEQUFpRDs7Ozs7SUFDakQsMERBQXlEOztJQUN6RCw2REFBb0c7O0lBQ3BHLHNEQUErRTs7SUFDL0Usc0RBQWdGOztJQUNoRix1REFBeUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHtcbiAgICBNQVRfQVVUT0NPTVBMRVRFX0RFRkFVTFRfT1BUSU9OUyxcbiAgICBNYXRBdXRvY29tcGxldGUsXG4gICAgTWF0QXV0b2NvbXBsZXRlRGVmYXVsdE9wdGlvbnMsXG4gICAgTWF0QXV0b2NvbXBsZXRlU2VsZWN0ZWRFdmVudFxufSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlXCI7XG5pbXBvcnQge1xuICAgIE1BVF9DSElQU19ERUZBVUxUX09QVElPTlMsXG4gICAgTWF0Q2hpcElucHV0RXZlbnQsXG4gICAgTWF0Q2hpcExpc3QsXG4gICAgTWF0Q2hpcHNEZWZhdWx0T3B0aW9uc1xufSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY2hpcHNcIjtcbmltcG9ydCB7XG4gICAgTGFiZWxPcHRpb25zLFxuICAgIE1BVF9MQUJFTF9HTE9CQUxfT1BUSU9OUyxcbiAgICBNQVRfUklQUExFX0dMT0JBTF9PUFRJT05TLFxuICAgIFJpcHBsZUdsb2JhbE9wdGlvbnNcbn0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcbmltcG9ydCB7IE1hdElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2lucHV0XCI7XG5pbXBvcnQge1xuICAgIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudCxcbiAgICBEeW5hbWljRm9ybUxheW91dCxcbiAgICBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSxcbiAgICBEeW5hbWljSW5wdXRNb2RlbFxufSBmcm9tIFwiQG5nLWR5bmFtaWMtZm9ybXMvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJkeW5hbWljLW1hdGVyaWFsLWNoaXBzXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9keW5hbWljLW1hdGVyaWFsLWNoaXBzLmNvbXBvbmVudC5odG1sXCJcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY01hdGVyaWFsQ2hpcHNDb21wb25lbnQgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQge1xuXG4gICAgQElucHV0KCkgZ3JvdXA6IEZvcm1Hcm91cDtcbiAgICBASW5wdXQoKSBsYXlvdXQ6IER5bmFtaWNGb3JtTGF5b3V0O1xuICAgIEBJbnB1dCgpIG1vZGVsOiBEeW5hbWljSW5wdXRNb2RlbDtcblxuICAgIEBPdXRwdXQoKSBibHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY3VzdG9tRXZlbnQ6IEV2ZW50RW1pdHRlcjxEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBWaWV3Q2hpbGQoXCJtYXRBdXRvY29tcGxldGVcIiwge3N0YXRpYzogdHJ1ZX0pIG1hdEF1dG9jb21wbGV0ZTogTWF0QXV0b2NvbXBsZXRlO1xuICAgIEBWaWV3Q2hpbGQoXCJtYXRDaGlwTGlzdFwiLCB7c3RhdGljOiB0cnVlfSkgbWF0Q2hpcExpc3Q6IE1hdENoaXBMaXN0O1xuICAgIEBWaWV3Q2hpbGQoTWF0SW5wdXQsIHtzdGF0aWM6IHRydWV9KSBtYXRJbnB1dDogTWF0SW5wdXQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbGF5b3V0U2VydmljZTogRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2YWxpZGF0aW9uU2VydmljZTogRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE1BVF9BVVRPQ09NUExFVEVfREVGQVVMVF9PUFRJT05TKSBwdWJsaWMgQVVUT0NPTVBMRVRFX09QVElPTlM6IE1hdEF1dG9jb21wbGV0ZURlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgICAgIEBJbmplY3QoTUFUX0NISVBTX0RFRkFVTFRfT1BUSU9OUykgcHVibGljIENISVBTX09QVElPTlM6IE1hdENoaXBzRGVmYXVsdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfTEFCRUxfR0xPQkFMX09QVElPTlMpIEBPcHRpb25hbCgpIHB1YmxpYyBMQUJFTF9PUFRJT05TOiBMYWJlbE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfUklQUExFX0dMT0JBTF9PUFRJT05TKSBAT3B0aW9uYWwoKSBwdWJsaWMgUklQUExFX09QVElPTlM6IFJpcHBsZUdsb2JhbE9wdGlvbnMpIHtcblxuICAgICAgICBzdXBlcihsYXlvdXRTZXJ2aWNlLCB2YWxpZGF0aW9uU2VydmljZSk7XG4gICAgfVxuXG4gICAgZ2V0IGNoaXBzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5tb2RlbC52YWx1ZSkgPyB0aGlzLm1vZGVsLnZhbHVlIGFzIHN0cmluZ1tdIDogW107XG4gICAgfVxuXG4gICAgb25DaGlwSW5wdXRUb2tlbkVuZCgkZXZlbnQ6IE1hdENoaXBJbnB1dEV2ZW50KTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gJGV2ZW50LmlucHV0LFxuICAgICAgICAgICAgICBpbnB1dFZhbHVlICAgPSAkZXZlbnQudmFsdWUudHJpbSgpO1xuXG4gICAgICAgIGlmIChpbnB1dFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbC5wYXRjaFZhbHVlKFsuLi50aGlzLmNoaXBzLCBpbnB1dFZhbHVlXSk7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCRldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gXCJcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hpcFNlbGVjdGVkKCRldmVudDogTWF0QXV0b2NvbXBsZXRlU2VsZWN0ZWRFdmVudCk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hpcCA9ICRldmVudC5vcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgIGNoaXBzICAgICAgICA9IHRoaXMuY2hpcHM7XG5cbiAgICAgICAgaWYgKCFjaGlwcy5pbmNsdWRlcyhzZWxlY3RlZENoaXApKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wucGF0Y2hWYWx1ZShbLi4udGhpcy5jaGlwcywgc2VsZWN0ZWRDaGlwXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNoaXBSZW1vdmVkKGNoaXA6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGNoaXBzID0gdGhpcy5jaGlwcztcblxuICAgICAgICBpZiAoY2hpcHNbaW5kZXhdID09PSBjaGlwKSB7XG5cbiAgICAgICAgICAgIGNoaXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wucGF0Y2hWYWx1ZShbLi4uY2hpcHNdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==