/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_RIPPLE_GLOBAL_OPTIONS } from "@angular/material/core";
import { MatSlideToggle } from "@angular/material/slide-toggle";
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicSwitchModel } from "@ng-dynamic-forms/core";
var DynamicMaterialSlideToggleComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicMaterialSlideToggleComponent, _super);
    function DynamicMaterialSlideToggleComponent(layoutService, validationService, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialSlideToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-slide-toggle",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <mat-slide-toggle #matSlideToggle\n                      [checked]=\"model.checked\"\n                      [color]=\"model.getAdditional('color', 'accent')\"\n                      [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                      [formControlName]=\"model.id\"\n                      [id]=\"elementId\"\n                      [labelPosition]=\"model.labelPosition || 'after'\"\n                      [name]=\"model.name\"\n                      [ngClass]=\"[getClass('element','control'), getClass('grid','control')]\"\n                      (change)=\"onChange($event)\"\n                      (dragChange)=\"onCustomEvent($event, 'dragChange')\"\n                      (toggleChange)=\"onCustomEvent($event, 'toggleChange')\">\n\n        <span *ngIf=\"!model.checked\" [innerHTML]=\"model.offLabel\"></span>\n\n        <span *ngIf=\"model.checked\" [innerHTML]=\"model.onLabel\"></span>\n\n    </mat-slide-toggle>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialSlideToggleComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialSlideToggleComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matSlideToggle: [{ type: ViewChild, args: ["matSlideToggle", { static: true },] }]
    };
    return DynamicMaterialSlideToggleComponent;
}(DynamicFormControlComponent));
export { DynamicMaterialSlideToggleComponent };
if (false) {
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.matSlideToggle;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialSlideToggleComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialSlideToggleComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialSlideToggleComponent.prototype.RIPPLE_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tYXRlcmlhbC1zbGlkZS10b2dnbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvdWktbWF0ZXJpYWwvIiwic291cmNlcyI6WyJsaWIvc2xpZGUtdG9nZ2xlL2R5bmFtaWMtbWF0ZXJpYWwtc2xpZGUtdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSx5QkFBeUIsRUFBdUIsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUNILDJCQUEyQixFQUczQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLGtCQUFrQixFQUNyQixNQUFNLHdCQUF3QixDQUFDO0FBRWhDO0lBSXlELCtEQUEyQjtJQWFoRiw2Q0FBc0IsYUFBdUMsRUFDdkMsaUJBQStDLEVBQ0gsY0FBbUM7UUFGckcsWUFJSSxrQkFBTSxhQUFhLEVBQUUsaUJBQWlCLENBQUMsU0FDMUM7UUFMcUIsbUJBQWEsR0FBYixhQUFhLENBQTBCO1FBQ3ZDLHVCQUFpQixHQUFqQixpQkFBaUIsQ0FBOEI7UUFDSCxvQkFBYyxHQUFkLGNBQWMsQ0FBcUI7UUFUM0YsVUFBSSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdDLFlBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQyxpQkFBVyxHQUFnRCxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlFLFdBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFTeEQsQ0FBQzs7Z0JBdEJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsK0JBQStCO29CQUN6Qyx1akNBQTZEO2lCQUNoRTs7OztnQkFSRyx3QkFBd0I7Z0JBQ3hCLDRCQUE0QjtnREF1QmYsTUFBTSxTQUFDLHlCQUF5QixjQUFHLFFBQVE7Ozt3QkFidkQsS0FBSzt5QkFDTCxLQUFLO3dCQUNMLEtBQUs7dUJBRUwsTUFBTTt5QkFDTixNQUFNOzhCQUNOLE1BQU07d0JBQ04sTUFBTTtpQ0FFTixTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztJQVFqRCwwQ0FBQztDQUFBLEFBdkJELENBSXlELDJCQUEyQixHQW1CbkY7U0FuQlksbUNBQW1DOzs7SUFFNUMsb0RBQTBCOztJQUMxQixxREFBbUM7O0lBQ25DLG9EQUFtQzs7SUFFbkMsbURBQXVEOztJQUN2RCxxREFBeUQ7O0lBQ3pELDBEQUF3Rjs7SUFDeEYsb0RBQXdEOztJQUV4RCw2REFBOEU7Ozs7O0lBRWxFLDREQUFpRDs7Ozs7SUFDakQsZ0VBQXlEOztJQUN6RCw2REFBeUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTUFUX1JJUFBMRV9HTE9CQUxfT1BUSU9OUywgUmlwcGxlR2xvYmFsT3B0aW9ucyB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9jb3JlXCI7XG5pbXBvcnQgeyBNYXRTbGlkZVRvZ2dsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9zbGlkZS10b2dnbGVcIjtcbmltcG9ydCB7XG4gICAgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50LFxuICAgIER5bmFtaWNGb3JtQ29udHJvbEN1c3RvbUV2ZW50LFxuICAgIER5bmFtaWNGb3JtTGF5b3V0LFxuICAgIER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgIER5bmFtaWNTd2l0Y2hNb2RlbFxufSBmcm9tIFwiQG5nLWR5bmFtaWMtZm9ybXMvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJkeW5hbWljLW1hdGVyaWFsLXNsaWRlLXRvZ2dsZVwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vZHluYW1pYy1tYXRlcmlhbC1zbGlkZS10b2dnbGUuY29tcG9uZW50Lmh0bWxcIlxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTWF0ZXJpYWxTbGlkZVRvZ2dsZUNvbXBvbmVudCBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKSBncm91cDogRm9ybUdyb3VwO1xuICAgIEBJbnB1dCgpIGxheW91dDogRHluYW1pY0Zvcm1MYXlvdXQ7XG4gICAgQElucHV0KCkgbW9kZWw6IER5bmFtaWNTd2l0Y2hNb2RlbDtcblxuICAgIEBPdXRwdXQoKSBibHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgY3VzdG9tRXZlbnQ6IEV2ZW50RW1pdHRlcjxEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBWaWV3Q2hpbGQoXCJtYXRTbGlkZVRvZ2dsZVwiLCB7IHN0YXRpYzogdHJ1ZSB9KSBtYXRTbGlkZVRvZ2dsZTogTWF0U2xpZGVUb2dnbGU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbGF5b3V0U2VydmljZTogRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2YWxpZGF0aW9uU2VydmljZTogRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE1BVF9SSVBQTEVfR0xPQkFMX09QVElPTlMpIEBPcHRpb25hbCgpIHB1YmxpYyBSSVBQTEVfT1BUSU9OUzogUmlwcGxlR2xvYmFsT3B0aW9ucykge1xuXG4gICAgICAgIHN1cGVyKGxheW91dFNlcnZpY2UsIHZhbGlkYXRpb25TZXJ2aWNlKTtcbiAgICB9XG59Il19