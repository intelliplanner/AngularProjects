/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { ErrorStateMatcher, MAT_LABEL_GLOBAL_OPTIONS, MAT_RIPPLE_GLOBAL_OPTIONS } from "@angular/material/core";
import { MatSelect } from "@angular/material/select";
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicSelectModel } from "@ng-dynamic-forms/core";
export class DynamicMaterialSelectComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} errorStateMatcher
     * @param {?} LABEL_OPTIONS
     * @param {?} RIPPLE_OPTIONS
     */
    constructor(layoutService, validationService, errorStateMatcher, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.errorStateMatcher = errorStateMatcher;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-select",
                template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [ngClass]=\"getClass('grid', 'control')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <mat-select #matSelect\n                [compareWith]=\"model.compareWithFn\"\n                [disableOptionCentering]=\"model.getAdditional('disableOptionCentering', false)\"\n                [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                [errorStateMatcher]=\"model.getAdditional('errorStateMatcher', errorStateMatcher)\"\n                [formControlName]=\"model.id\"\n                [id]=\"elementId\"\n                [multiple]=\"model.multiple\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [placeholder]=\"model.placeholder\"\n                [required]=\"model.required\"\n                (openedChange)=\"onCustomEvent($event, 'openedChange')\"\n                (selectionChange)=\"onChange($event)\">\n\n        <mat-option *ngFor=\"let option of model.options$ | async\"\n                    [disabled]=\"option.disabled\"\n                    [ngClass]=\"getClass('element', 'option')\"\n                    [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-option>\n    </mat-select>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
            }] }
];
/** @nocollapse */
DynamicMaterialSelectComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: ErrorStateMatcher, decorators: [{ type: Inject, args: [ErrorStateMatcher,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
];
DynamicMaterialSelectComponent.propDecorators = {
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    matSelect: [{ type: ViewChild, args: ["matSelect", { static: true },] }]
};
if (false) {
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.matSelect;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialSelectComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialSelectComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.errorStateMatcher;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.LABEL_OPTIONS;
    /** @type {?} */
    DynamicMaterialSelectComponent.prototype.RIPPLE_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tYXRlcmlhbC1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvdWktbWF0ZXJpYWwvIiwic291cmNlcyI6WyJsaWIvc2VsZWN0L2R5bmFtaWMtbWF0ZXJpYWwtc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFnQix3QkFBd0IsRUFBRSx5QkFBeUIsRUFBdUIsTUFBTSx3QkFBd0IsQ0FBQztBQUNuSixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUNILDJCQUEyQixFQUczQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLGtCQUFrQixFQUNyQixNQUFNLHdCQUF3QixDQUFDO0FBTWhDLE1BQU0sT0FBTyw4QkFBK0IsU0FBUSwyQkFBMkI7Ozs7Ozs7O0lBYTNFLFlBQXNCLGFBQXVDLEVBQ3ZDLGlCQUErQyxFQUN2QixpQkFBb0MsRUFDakIsYUFBMkIsRUFDMUIsY0FBbUM7UUFFakcsS0FBSyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBTnRCLGtCQUFhLEdBQWIsYUFBYSxDQUEwQjtRQUN2QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQThCO1FBQ3ZCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDakIsa0JBQWEsR0FBYixhQUFhLENBQWM7UUFDMUIsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBWDNGLFNBQUksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0MsZ0JBQVcsR0FBZ0QsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM5RSxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFXeEQsQ0FBQzs7O1lBeEJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQywwL0RBQXVEO2FBQzFEOzs7O1lBUkcsd0JBQXdCO1lBQ3hCLDRCQUE0QjtZQVB2QixpQkFBaUIsdUJBOEJULE1BQU0sU0FBQyxpQkFBaUI7NENBQ3hCLE1BQU0sU0FBQyx3QkFBd0IsY0FBRyxRQUFROzRDQUMxQyxNQUFNLFNBQUMseUJBQXlCLGNBQUcsUUFBUTs7O29CQWZ2RCxLQUFLO3FCQUNMLEtBQUs7b0JBQ0wsS0FBSzttQkFFTCxNQUFNO3FCQUNOLE1BQU07MEJBQ04sTUFBTTtvQkFDTixNQUFNO3dCQUVOLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7O0lBVHhDLCtDQUEwQjs7SUFDMUIsZ0RBQW1DOztJQUNuQywrQ0FBMkM7O0lBRTNDLDhDQUF1RDs7SUFDdkQsZ0RBQXlEOztJQUN6RCxxREFBd0Y7O0lBQ3hGLCtDQUF3RDs7SUFFeEQsbURBQStEOzs7OztJQUVuRCx1REFBaUQ7Ozs7O0lBQ2pELDJEQUF5RDs7SUFDekQsMkRBQXNFOztJQUN0RSx1REFBZ0Y7O0lBQ2hGLHdEQUF5RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBFcnJvclN0YXRlTWF0Y2hlciwgTGFiZWxPcHRpb25zLCBNQVRfTEFCRUxfR0xPQkFMX09QVElPTlMsIE1BVF9SSVBQTEVfR0xPQkFMX09QVElPTlMsIFJpcHBsZUdsb2JhbE9wdGlvbnMgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xuaW1wb3J0IHsgTWF0U2VsZWN0IH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL3NlbGVjdFwiO1xuaW1wb3J0IHtcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQsXG4gICAgRHluYW1pY0Zvcm1Db250cm9sQ3VzdG9tRXZlbnQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXQsXG4gICAgRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgIER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UsXG4gICAgRHluYW1pY1NlbGVjdE1vZGVsXG59IGZyb20gXCJAbmctZHluYW1pYy1mb3Jtcy9jb3JlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImR5bmFtaWMtbWF0ZXJpYWwtc2VsZWN0XCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9keW5hbWljLW1hdGVyaWFsLXNlbGVjdC5jb21wb25lbnQuaHRtbFwiXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNNYXRlcmlhbFNlbGVjdENvbXBvbmVudCBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKSBncm91cDogRm9ybUdyb3VwO1xuICAgIEBJbnB1dCgpIGxheW91dDogRHluYW1pY0Zvcm1MYXlvdXQ7XG4gICAgQElucHV0KCkgbW9kZWw6IER5bmFtaWNTZWxlY3RNb2RlbDxzdHJpbmc+O1xuXG4gICAgQE91dHB1dCgpIGJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBjdXN0b21FdmVudDogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEN1c3RvbUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgZm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZChcIm1hdFNlbGVjdFwiLCB7IHN0YXRpYzogdHJ1ZSB9KSBtYXRTZWxlY3Q6IE1hdFNlbGVjdDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsYXlvdXRTZXJ2aWNlOiBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZhbGlkYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIEBJbmplY3QoRXJyb3JTdGF0ZU1hdGNoZXIpIHB1YmxpYyBlcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXIsXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfTEFCRUxfR0xPQkFMX09QVElPTlMpIEBPcHRpb25hbCgpIHB1YmxpYyBMQUJFTF9PUFRJT05TOiBMYWJlbE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfUklQUExFX0dMT0JBTF9PUFRJT05TKSBAT3B0aW9uYWwoKSBwdWJsaWMgUklQUExFX09QVElPTlM6IFJpcHBsZUdsb2JhbE9wdGlvbnMpIHtcblxuICAgICAgICBzdXBlcihsYXlvdXRTZXJ2aWNlLCB2YWxpZGF0aW9uU2VydmljZSk7XG4gICAgfVxufSJdfQ==