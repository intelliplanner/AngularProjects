/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_LABEL_GLOBAL_OPTIONS } from "@angular/material/core";
import { MatDatepicker } from "@angular/material/datepicker";
import { MatInput } from "@angular/material/input";
import { DynamicDatePickerModel, DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService } from "@ng-dynamic-forms/core";
export class DynamicMaterialDatePickerComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} LABEL_OPTIONS
     */
    constructor(layoutService, validationService, LABEL_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-datepicker",
                template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [max]=\"model.max\"\n           [matDatepicker]=\"matDatepicker\"\n           [min]=\"model.min\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           (blur)=\"onBlur($event)\"\n           (dateChange)=\"onChange($event)\"\n           (dateInput)=\"onCustomEvent($event, 'dateInput')\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]=\"model.getAdditional('opened', false)\"\n                    [startAt]=\"model.focusedDate\"\n                    [startView]=\"model.getAdditional('startView', 'month')\"\n                    [touchUi]=\"model.getAdditional('touchUi', false)\"\n                    (closed)=\"onCustomEvent($event, 'closed')\"\n                    (monthSelected)=\"onCustomEvent($event, 'monthSelected')\"\n                    (opened)=\"onCustomEvent($event, 'opened')\"\n                    (yearSelected)=\"onCustomEvent($event, 'yearSelected')\"></mat-datepicker>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
            }] }
];
/** @nocollapse */
DynamicMaterialDatePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] }
];
DynamicMaterialDatePickerComponent.propDecorators = {
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    matDatePicker: [{ type: ViewChild, args: ["matDatepicker", { static: true },] }],
    matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
};
if (false) {
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matDatePicker;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matInput;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialDatePickerComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicMaterialDatePickerComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.LABEL_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tYXRlcmlhbC1kYXRlcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL3VpLW1hdGVyaWFsLyIsInNvdXJjZXMiOlsibGliL2RhdGVwaWNrZXIvZHluYW1pYy1tYXRlcmlhbC1kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFnQix3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUNILHNCQUFzQixFQUN0QiwyQkFBMkIsRUFHM0Isd0JBQXdCLEVBQ3hCLDRCQUE0QixFQUMvQixNQUFNLHdCQUF3QixDQUFDO0FBTWhDLE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSwyQkFBMkI7Ozs7OztJQWMvRSxZQUFzQixhQUF1QyxFQUN2QyxpQkFBK0MsRUFDSixhQUEyQjtRQUV4RixLQUFLLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFKdEIsa0JBQWEsR0FBYixhQUFhLENBQTBCO1FBQ3ZDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBOEI7UUFDSixrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQVZsRixTQUFJLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9DLGdCQUFXLEdBQWdELElBQUksWUFBWSxFQUFFLENBQUM7UUFDOUUsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBVXhELENBQUM7OztZQXZCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsMHpFQUEyRDthQUM5RDs7OztZQVBHLHdCQUF3QjtZQUN4Qiw0QkFBNEI7NENBdUJmLE1BQU0sU0FBQyx3QkFBd0IsY0FBRyxRQUFROzs7b0JBZHRELEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO21CQUVMLE1BQU07cUJBQ04sTUFBTTswQkFDTixNQUFNO29CQUNOLE1BQU07NEJBRU4sU0FBUyxTQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7dUJBQzNDLFNBQVMsU0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7O0lBVnJDLG1EQUEwQjs7SUFDMUIsb0RBQW1DOztJQUNuQyxtREFBdUM7O0lBRXZDLGtEQUF1RDs7SUFDdkQsb0RBQXlEOztJQUN6RCx5REFBd0Y7O0lBQ3hGLG1EQUF3RDs7SUFFeEQsMkRBQWdGOztJQUNoRixzREFBMEQ7Ozs7O0lBRTlDLDJEQUFpRDs7Ozs7SUFDakQsK0RBQXlEOztJQUN6RCwyREFBZ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTGFiZWxPcHRpb25zLCBNQVRfTEFCRUxfR0xPQkFMX09QVElPTlMgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xuaW1wb3J0IHsgTWF0RGF0ZXBpY2tlciB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9kYXRlcGlja2VyXCI7XG5pbXBvcnQgeyBNYXRJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9pbnB1dFwiO1xuaW1wb3J0IHtcbiAgICBEeW5hbWljRGF0ZVBpY2tlck1vZGVsLFxuICAgIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudCxcbiAgICBEeW5hbWljRm9ybUxheW91dCxcbiAgICBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZVxufSBmcm9tIFwiQG5nLWR5bmFtaWMtZm9ybXMvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJkeW5hbWljLW1hdGVyaWFsLWRhdGVwaWNrZXJcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2R5bmFtaWMtbWF0ZXJpYWwtZGF0ZXBpY2tlci5jb21wb25lbnQuaHRtbFwiXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNNYXRlcmlhbERhdGVQaWNrZXJDb21wb25lbnQgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQge1xuXG4gICAgQElucHV0KCkgZ3JvdXA6IEZvcm1Hcm91cDtcbiAgICBASW5wdXQoKSBsYXlvdXQ6IER5bmFtaWNGb3JtTGF5b3V0O1xuICAgIEBJbnB1dCgpIG1vZGVsOiBEeW5hbWljRGF0ZVBpY2tlck1vZGVsO1xuXG4gICAgQE91dHB1dCgpIGJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBjdXN0b21FdmVudDogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEN1c3RvbUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgZm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZChcIm1hdERhdGVwaWNrZXJcIiwgeyBzdGF0aWM6IHRydWUgfSkgbWF0RGF0ZVBpY2tlcjogTWF0RGF0ZXBpY2tlcjxhbnk+O1xuICAgIEBWaWV3Q2hpbGQoTWF0SW5wdXQsIHsgc3RhdGljOiB0cnVlIH0pIG1hdElucHV0OiBNYXRJbnB1dDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsYXlvdXRTZXJ2aWNlOiBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZhbGlkYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIEBJbmplY3QoTUFUX0xBQkVMX0dMT0JBTF9PUFRJT05TKSBAT3B0aW9uYWwoKSBwdWJsaWMgTEFCRUxfT1BUSU9OUzogTGFiZWxPcHRpb25zKSB7XG5cbiAgICAgICAgc3VwZXIobGF5b3V0U2VydmljZSwgdmFsaWRhdGlvblNlcnZpY2UpO1xuICAgIH1cbn0iXX0=