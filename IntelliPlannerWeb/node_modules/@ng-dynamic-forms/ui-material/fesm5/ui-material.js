import { __extends, __spread } from 'tslib';
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormArrayComponent, DynamicFormValueControlModel, DynamicFormComponentService, DynamicFormRelationService, DynamicTemplateDirective, DynamicFormControlContainerComponent, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicFormService, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import { EventEmitter, Component, Inject, Optional, Input, Output, ViewChild, ComponentFactoryResolver, ContentChildren, ViewContainerRef, ViewChildren, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MAT_RIPPLE_GLOBAL_OPTIONS, MAT_LABEL_GLOBAL_OPTIONS, ErrorStateMatcher } from '@angular/material/core';
import { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocompleteModule } from '@angular/material/autocomplete';
import { MAT_CHIPS_DEFAULT_OPTIONS, MatChipsModule } from '@angular/material/chips';
import { MatInput, MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSliderModule } from '@angular/material/slider';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { TextMaskModule } from 'angular2-text-mask';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicMaterialFormInputControlComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormInputControlComponent, _super);
    function DynamicMaterialFormInputControlComponent(layoutService, validationService) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        return _this;
    }
    Object.defineProperty(DynamicMaterialFormInputControlComponent.prototype, "characterCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.matInput ? this.matInput.value.length : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicMaterialFormInputControlComponent.prototype, "characterHint", {
        get: /**
         * @return {?}
         */
        function () {
            return this.characterCount + " / " + ((/** @type {?} */ (this.model))).maxLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicMaterialFormInputControlComponent.prototype, "showCharacterHint", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(((/** @type {?} */ (this.model))).maxLength && this.characterCount);
        },
        enumerable: true,
        configurable: true
    });
    return DynamicMaterialFormInputControlComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialCheckboxComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialCheckboxComponent, _super);
    function DynamicMaterialCheckboxComponent(layoutService, validationService, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-checkbox",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <mat-checkbox #matCheckbox\n                  [checked]=\"model.checked\"\n                  [color]=\"model.getAdditional('color', 'accent')\"\n                  [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                  [formControlName]=\"model.id\"\n                  [id]=\"elementId\"\n                  [indeterminate]=\"model.indeterminate\"\n                  [labelPosition]=\"model.labelPosition || 'after'\"\n                  [name]=\"model.name\"\n                  [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                  (blur)=\"onBlur($event)\"\n                  (change)=\"onChange($event)\"\n                  (focus)=\"onFocus($event)\"\n                  (indeterminateChange)=\"onCustomEvent($event, 'indeterminateChange')\">\n\n        <span [ngClass]=\"getClass('element', 'label')\" [innerHTML]=\"model.label\"></span>\n\n    </mat-checkbox>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialCheckboxComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialCheckboxComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matCheckbox: [{ type: ViewChild, args: ["matCheckbox", { static: true },] }]
    };
    return DynamicMaterialCheckboxComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialChipsComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialChipsComponent, _super);
    function DynamicMaterialChipsComponent(layoutService, validationService, AUTOCOMPLETE_OPTIONS, CHIPS_OPTIONS, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.AUTOCOMPLETE_OPTIONS = AUTOCOMPLETE_OPTIONS;
        _this.CHIPS_OPTIONS = CHIPS_OPTIONS;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    Object.defineProperty(DynamicMaterialChipsComponent.prototype, "chips", {
        get: /**
         * @return {?}
         */
        function () {
            return Array.isArray(this.model.value) ? (/** @type {?} */ (this.model.value)) : [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipInputTokenEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var inputElement = $event.input;
        /** @type {?} */
        var inputValue = $event.value.trim();
        if (inputValue.length > 0) {
            this.control.patchValue(__spread(this.chips, [inputValue]));
            this.onChange($event);
        }
        if (inputElement instanceof HTMLInputElement) {
            inputElement.value = "";
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var selectedChip = $event.option.value;
        /** @type {?} */
        var chips = this.chips;
        if (!chips.includes(selectedChip)) {
            this.control.patchValue(__spread(this.chips, [selectedChip]));
        }
    };
    /**
     * @param {?} chip
     * @param {?} index
     * @return {?}
     */
    DynamicMaterialChipsComponent.prototype.onChipRemoved = /**
     * @param {?} chip
     * @param {?} index
     * @return {?}
     */
    function (chip, index) {
        /** @type {?} */
        var chips = this.chips;
        if (chips[index] === chip) {
            chips.splice(index, 1);
            this.control.patchValue(__spread(chips));
        }
    };
    DynamicMaterialChipsComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-chips",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <mat-chip-list #matChipList [formControlName]=\"model.id\" [id]=\"elementId\" [multiple]=\"true\">\n\n        <mat-chip *ngFor=\"let chip of chips; let index = index\"\n                  [selectable]=\"false\"\n                  (removed)=\"onChipRemoved(chip, index)\">\n\n            <span>{{ chip }}</span>\n\n            <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n\n        <input matInput\n               [matAutocomplete]=\"matAutocomplete\"\n               [matChipInputAddOnBlur]=\"model.getAdditional('matChipInputAddOnBlur', true)\"\n               [matChipInputFor]=\"matChipList\"\n               [matChipInputSeparatorKeyCodes]=\"model.getAdditional('matChipInputSeparatorKeyCodes', CHIPS_OPTIONS['separatorKeyCodes'])\"\n               [placeholder]=\"model.placeholder\"\n               (matChipInputTokenEnd)=\"onChipInputTokenEnd($event)\"\n               (blur)=\"onBlur($event)\"\n               (focus)=\"onFocus($event)\"/>\n\n        <mat-autocomplete #matAutocomplete=\"matAutocomplete\"\n                          [autoActiveFirstOption]=\"model.getAdditional('autoActiveFirstOption', AUTOCOMPLETE_OPTIONS['autoActiveFirstOption'])\"\n                          [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                          [displayWith]=\"model.getAdditional('displayWith', null)\"\n                          (optionSelected)=\"onChipSelected($event)\">\n\n            <mat-option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">{{ option }}</mat-option>\n\n        </mat-autocomplete>\n\n    </mat-chip-list>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialChipsComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialChipsComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matAutocomplete: [{ type: ViewChild, args: ["matAutocomplete", { static: true },] }],
        matChipList: [{ type: ViewChild, args: ["matChipList", { static: true },] }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialChipsComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialDatePickerComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialDatePickerComponent, _super);
    function DynamicMaterialDatePickerComponent(layoutService, validationService, LABEL_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialDatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-datepicker",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [max]=\"model.max\"\n           [matDatepicker]=\"matDatepicker\"\n           [min]=\"model.min\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           (blur)=\"onBlur($event)\"\n           (dateChange)=\"onChange($event)\"\n           (dateInput)=\"onCustomEvent($event, 'dateInput')\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]=\"model.getAdditional('opened', false)\"\n                    [startAt]=\"model.focusedDate\"\n                    [startView]=\"model.getAdditional('startView', 'month')\"\n                    [touchUi]=\"model.getAdditional('touchUi', false)\"\n                    (closed)=\"onCustomEvent($event, 'closed')\"\n                    (monthSelected)=\"onCustomEvent($event, 'monthSelected')\"\n                    (opened)=\"onCustomEvent($event, 'opened')\"\n                    (yearSelected)=\"onCustomEvent($event, 'yearSelected')\"></mat-datepicker>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialDatePickerComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialDatePickerComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matDatePicker: [{ type: ViewChild, args: ["matDatepicker", { static: true },] }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialDatePickerComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialFormArrayComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormArrayComponent, _super);
    function DynamicMaterialFormArrayComponent(layoutService, validationService) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialFormArrayComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-form-array",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"elementId\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-material-form-control *ngFor=\"let _model of groupModel.group\"\n                                           [context]=\"groupModel\"\n                                           [group]=\"array.at(idx)\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"layout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model),\n                                                       getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (matEvent)=\"onCustomEvent($event, null, true)\"></dynamic-material-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialFormArrayComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService }
    ]; };
    DynamicMaterialFormArrayComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        templates: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }]
    };
    return DynamicMaterialFormArrayComponent;
}(DynamicFormArrayComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialFormGroupComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormGroupComponent, _super);
    function DynamicMaterialFormGroupComponent(layoutService, validationService) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialFormGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-form-group",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\"\n         [formGroupName]=\"model.id\"\n         [id]=\"elementId\"\n         [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\">\n\n        <dynamic-material-form-control *ngFor=\"let _model of model.group\"\n                                       [group]=\"control\"\n                                       [hidden]=\"_model.hidden\"\n                                       [layout]=\"layout\"\n                                       [model]=\"_model\"\n                                       [templates]=\"templates\"\n                                       [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model),\n                                                   getClass('element','children'), getClass('grid','children')]\"\n                                       (blur)=\"onBlur($event)\"\n                                       (change)=\"onChange($event)\"\n                                       (focus)=\"onFocus($event)\"\n                                       (matEvent)=\"onCustomEvent($event, null, true)\"></dynamic-material-form-control>\n    </div>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialFormGroupComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService }
    ]; };
    DynamicMaterialFormGroupComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        templates: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }]
    };
    return DynamicMaterialFormGroupComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialInputComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialInputComponent, _super);
    function DynamicMaterialInputComponent(layoutService, validationService, errorStateMatcher, AUTOCOMPLETE_OPTIONS, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.errorStateMatcher = errorStateMatcher;
        _this.AUTOCOMPLETE_OPTIONS = AUTOCOMPLETE_OPTIONS;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialInputComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-input",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid','control')\"\n                [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [errorStateMatcher]=\"model.getAdditional('errorStateMatcher', errorStateMatcher)\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [maxlength]=\"model.maxLength\"\n           [matAutocomplete]=\"matAutocomplete\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n\n<mat-autocomplete #matAutocomplete=\"matAutocomplete\"\n                  [autoActiveFirstOption]=\"model.getAdditional('autoActiveFirstOption', AUTOCOMPLETE_OPTIONS['autoActiveFirstOption'])\"\n                  [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                  [displayWith]=\"model.getAdditional('displayWith', null)\"\n                  (optionSelected)=\"onChange($event)\">\n\n    <mat-option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">{{ option }}</mat-option>\n\n</mat-autocomplete>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialInputComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: ErrorStateMatcher, decorators: [{ type: Inject, args: [ErrorStateMatcher,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialInputComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matAutocomplete: [{ type: ViewChild, args: ["matAutocomplete", { static: true },] }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialInputComponent;
}(DynamicMaterialFormInputControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialRadioGroupComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialRadioGroupComponent, _super);
    function DynamicMaterialRadioGroupComponent(layoutService, validationService) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialRadioGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-radio-group",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <mat-radio-group #matRadioGroup\n                     [formControlName]=\"model.id\"\n                     [id]=\"elementId\"\n                     [labelPosition]=\"model.getAdditional('labelPosition', 'after')\"\n                     [name]=\"model.name\"\n                     [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                     (blur)=\"onBlur($event)\"\n                     (change)=\"onChange($event)\"\n                     (focus)=\"onFocus($event)\">\n\n        <mat-radio-button *ngFor=\"let option of model.options$ | async\"\n                          [name]=\"model.name\"\n                          [ngClass]=\"getClass('element', 'option')\"\n                          [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-radio-button>\n\n    </mat-radio-group>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialRadioGroupComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService }
    ]; };
    DynamicMaterialRadioGroupComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matRadioGroup: [{ type: ViewChild, args: ["matRadioGroup", { static: true },] }]
    };
    return DynamicMaterialRadioGroupComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialSelectComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialSelectComponent, _super);
    function DynamicMaterialSelectComponent(layoutService, validationService, errorStateMatcher, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.errorStateMatcher = errorStateMatcher;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-select",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [ngClass]=\"getClass('grid', 'control')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <mat-select #matSelect\n                [compareWith]=\"model.compareWithFn\"\n                [disableOptionCentering]=\"model.getAdditional('disableOptionCentering', false)\"\n                [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                [errorStateMatcher]=\"model.getAdditional('errorStateMatcher', errorStateMatcher)\"\n                [formControlName]=\"model.id\"\n                [id]=\"elementId\"\n                [multiple]=\"model.multiple\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [placeholder]=\"model.placeholder\"\n                [required]=\"model.required\"\n                (openedChange)=\"onCustomEvent($event, 'openedChange')\"\n                (selectionChange)=\"onChange($event)\">\n\n        <mat-option *ngFor=\"let option of model.options$ | async\"\n                    [disabled]=\"option.disabled\"\n                    [ngClass]=\"getClass('element', 'option')\"\n                    [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-option>\n    </mat-select>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialSelectComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: ErrorStateMatcher, decorators: [{ type: Inject, args: [ErrorStateMatcher,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialSelectComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matSelect: [{ type: ViewChild, args: ["matSelect", { static: true },] }]
    };
    return DynamicMaterialSelectComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialSlideToggleComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialSlideToggleComponent, _super);
    function DynamicMaterialSlideToggleComponent(layoutService, validationService, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialSlideToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-slide-toggle",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <mat-slide-toggle #matSlideToggle\n                      [checked]=\"model.checked\"\n                      [color]=\"model.getAdditional('color', 'accent')\"\n                      [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                      [formControlName]=\"model.id\"\n                      [id]=\"elementId\"\n                      [labelPosition]=\"model.labelPosition || 'after'\"\n                      [name]=\"model.name\"\n                      [ngClass]=\"[getClass('element','control'), getClass('grid','control')]\"\n                      (change)=\"onChange($event)\"\n                      (dragChange)=\"onCustomEvent($event, 'dragChange')\"\n                      (toggleChange)=\"onCustomEvent($event, 'toggleChange')\">\n\n        <span *ngIf=\"!model.checked\" [innerHTML]=\"model.offLabel\"></span>\n\n        <span *ngIf=\"model.checked\" [innerHTML]=\"model.onLabel\"></span>\n\n    </mat-slide-toggle>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialSlideToggleComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialSlideToggleComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matSlideToggle: [{ type: ViewChild, args: ["matSlideToggle", { static: true },] }]
    };
    return DynamicMaterialSlideToggleComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialSliderComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialSliderComponent, _super);
    function DynamicMaterialSliderComponent(layoutService, validationService) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialSliderComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-slider",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <mat-slider #matSlider\n                [color]=\"model.getAdditional('color', 'accent')\"\n                [formControlName]=\"model.id\"\n                [id]=\"elementId\"\n                [invert]=\"model.getAdditional('invert', false)\"\n                [min]=\"model.min\"\n                [max]=\"model.max\"\n                [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                [step]=\"model.step\"\n                [tabIndex]=\"model.tabIndex\"\n                [thumbLabel]=\"model.getAdditional('thumbLabel', true)\"\n                [tickInterval]=\"model.getAdditional('tickInterval', 1)\"\n                [vertical]=\"model.vertical\"\n                (change)=\"onChange($event)\"\n                (input)=\"onCustomEvent($event, 'input')\"></mat-slider>\n\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialSliderComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService }
    ]; };
    DynamicMaterialSliderComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matSlider: [{ type: ViewChild, args: ["matSlider", { static: true },] }]
    };
    return DynamicMaterialSliderComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialTextAreaComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialTextAreaComponent, _super);
    function DynamicMaterialTextAreaComponent(layoutService, validationService, LABEL_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialTextAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-textarea",
                    template: "<mat-form-field [appearance]=\"model.getAdditional('appearance', 'legacy')\"\n                [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <textarea matInput\n              [cdkTextareaAutosize]=\"model.getAdditional('cdkTextareaAutosize', true)\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"elementId\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint>\n\n    <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n</mat-form-field>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialTextAreaComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional }] }
    ]; };
    DynamicMaterialTextAreaComponent.propDecorators = {
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        customEvent: [{ type: Output }],
        focus: [{ type: Output }],
        matInput: [{ type: ViewChild, args: [MatInput, { static: true },] }]
    };
    return DynamicMaterialTextAreaComponent;
}(DynamicMaterialFormInputControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialFormControlContainerComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormControlContainerComponent, _super);
    function DynamicMaterialFormControlContainerComponent(componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        var _this = _super.call(this, componentFactoryResolver, layoutService, validationService, componentService, relationService) || this;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.componentService = componentService;
        _this.relationService = relationService;
        _this.context = null;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.focus = new EventEmitter();
        _this.customEvent = new EventEmitter();
        return _this;
    }
    Object.defineProperty(DynamicMaterialFormControlContainerComponent.prototype, "componentType", {
        get: /**
         * @return {?}
         */
        function () {
            return this.componentService.getCustomComponentType(this.model) || materialUIFormControlMapFn(this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicMaterialFormControlContainerComponent.prototype, "hasMatFormField", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var matFormFieldTypes = [DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_INPUT,
                DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA];
            return matFormFieldTypes.some((/**
             * @param {?} type
             * @return {?}
             */
            function (type) { return _this.model.type === type; })) || (this.model instanceof DynamicFormValueControlModel &&
                this.model.getAdditional("isFormFieldControl"));
        },
        enumerable: true,
        configurable: true
    });
    DynamicMaterialFormControlContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-form-control",
                    template: "<div [formGroup]=\"group\" [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!hasMatFormField && !isCheckbox && hasLabel\"\n           [for]=\"elementId\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-container #componentViewContainer></ng-container>\n\n    <ng-container *ngIf=\"!hasMatFormField\">\n\n        <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialFormControlContainerComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: DynamicFormLayoutService },
        { type: DynamicFormValidationService },
        { type: DynamicFormComponentService },
        { type: DynamicFormRelationService }
    ]; };
    DynamicMaterialFormControlContainerComponent.propDecorators = {
        contentTemplateList: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
        inputTemplateList: [{ type: Input, args: ["templates",] }],
        context: [{ type: Input }],
        group: [{ type: Input }],
        layout: [{ type: Input }],
        model: [{ type: Input }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        customEvent: [{ type: Output, args: ["matEvent",] }],
        componentViewContainerRef: [{ type: ViewChild, args: ["componentViewContainer", { read: ViewContainerRef, static: true },] }]
    };
    return DynamicMaterialFormControlContainerComponent;
}(DynamicFormControlContainerComponent));
/**
 * @param {?} model
 * @return {?}
 */
function materialUIFormControlMapFn(model) {
    switch (model.type) {
        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
            return DynamicMaterialFormArrayComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
            return DynamicMaterialCheckboxComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            return DynamicMaterialFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
            return DynamicMaterialDatePickerComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
            return DynamicMaterialFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
            /** @type {?} */
            var inputModel = (/** @type {?} */ (model));
            return inputModel.multiple ? DynamicMaterialChipsComponent : DynamicMaterialInputComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
            return DynamicMaterialRadioGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
            return DynamicMaterialSelectComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
            return DynamicMaterialSliderComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
            return DynamicMaterialSlideToggleComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
            return DynamicMaterialTextAreaComponent;
        default:
            return null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicMaterialFormComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormComponent, _super);
    function DynamicMaterialFormComponent(formService, layoutService) {
        var _this = _super.call(this, formService, layoutService) || this;
        _this.formService = formService;
        _this.layoutService = layoutService;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.focus = new EventEmitter();
        _this.customEvent = new EventEmitter();
        return _this;
    }
    DynamicMaterialFormComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-form",
                    template: "<dynamic-material-form-control *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                               [group]=\"formGroup\"\n                               [hidden]=\"model.hidden\"\n                               [layout]=\"formLayout\"\n                               [model]=\"model\"\n                               [ngClass]=\"[getClass(model, 'element', 'host'), getClass(model, 'grid', 'host')]\"\n                               [templates]=\"templates\"\n                               (blur)=\"onEvent($event, 'blur')\"\n                               (change)=\"onEvent($event, 'change')\"\n                               (focus)=\"onEvent($event, 'focus')\"\n                               (matEvent)=\"onEvent($event, 'custom')\"></dynamic-material-form-control>"
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialFormComponent.ctorParameters = function () { return [
        { type: DynamicFormService },
        { type: DynamicFormLayoutService }
    ]; };
    DynamicMaterialFormComponent.propDecorators = {
        formGroup: [{ type: Input, args: ["group",] }],
        formModel: [{ type: Input, args: ["model",] }],
        formLayout: [{ type: Input, args: ["layout",] }],
        blur: [{ type: Output }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        customEvent: [{ type: Output, args: ["matEvent",] }],
        templates: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
        components: [{ type: ViewChildren, args: [DynamicMaterialFormControlContainerComponent,] }]
    };
    return DynamicMaterialFormComponent;
}(DynamicFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormsMaterialUIModule = /** @class */ (function () {
    function DynamicFormsMaterialUIModule() {
    }
    DynamicFormsMaterialUIModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        MatAutocompleteModule,
                        MatCheckboxModule,
                        MatChipsModule,
                        MatDatepickerModule,
                        MatIconModule,
                        MatInputModule,
                        MatRadioModule,
                        MatSelectModule,
                        MatSliderModule,
                        MatSlideToggleModule,
                        TextMaskModule,
                        DynamicFormsCoreModule
                    ],
                    declarations: [
                        DynamicMaterialCheckboxComponent,
                        DynamicMaterialChipsComponent,
                        DynamicMaterialDatePickerComponent,
                        DynamicMaterialFormArrayComponent,
                        DynamicMaterialFormComponent,
                        DynamicMaterialFormControlContainerComponent,
                        DynamicMaterialFormGroupComponent,
                        DynamicMaterialInputComponent,
                        DynamicMaterialRadioGroupComponent,
                        DynamicMaterialSelectComponent,
                        DynamicMaterialSlideToggleComponent,
                        DynamicMaterialSliderComponent,
                        DynamicMaterialTextAreaComponent
                    ],
                    entryComponents: [
                        DynamicMaterialCheckboxComponent,
                        DynamicMaterialChipsComponent,
                        DynamicMaterialDatePickerComponent,
                        DynamicMaterialFormArrayComponent,
                        DynamicMaterialFormGroupComponent,
                        DynamicMaterialInputComponent,
                        DynamicMaterialRadioGroupComponent,
                        DynamicMaterialSelectComponent,
                        DynamicMaterialSlideToggleComponent,
                        DynamicMaterialSliderComponent,
                        DynamicMaterialTextAreaComponent
                    ],
                    exports: [
                        DynamicFormsCoreModule,
                        DynamicMaterialCheckboxComponent,
                        DynamicMaterialChipsComponent,
                        DynamicMaterialDatePickerComponent,
                        DynamicMaterialFormArrayComponent,
                        DynamicMaterialFormComponent,
                        DynamicMaterialFormControlContainerComponent,
                        DynamicMaterialFormGroupComponent,
                        DynamicMaterialInputComponent,
                        DynamicMaterialRadioGroupComponent,
                        DynamicMaterialSelectComponent,
                        DynamicMaterialSlideToggleComponent,
                        DynamicMaterialSliderComponent,
                        DynamicMaterialTextAreaComponent
                    ]
                },] }
    ];
    return DynamicFormsMaterialUIModule;
}());

export { DynamicFormsMaterialUIModule, DynamicMaterialCheckboxComponent, DynamicMaterialChipsComponent, DynamicMaterialDatePickerComponent, DynamicMaterialFormArrayComponent, DynamicMaterialFormComponent, DynamicMaterialFormControlContainerComponent, DynamicMaterialFormGroupComponent, DynamicMaterialFormInputControlComponent, DynamicMaterialInputComponent, DynamicMaterialRadioGroupComponent, DynamicMaterialSelectComponent, DynamicMaterialSlideToggleComponent, DynamicMaterialSliderComponent, DynamicMaterialTextAreaComponent, materialUIFormControlMapFn };
//# sourceMappingURL=ui-material.js.map
