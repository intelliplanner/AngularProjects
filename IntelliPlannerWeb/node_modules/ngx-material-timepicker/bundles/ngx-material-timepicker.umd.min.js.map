{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","TimeUnit","TimePeriod","TimeFormat","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","asObservable","dispatchEvent","event","type","next","Error","Injectable","providedIn","DomService","cfr","appRef","injector","document","appendTimepickerToBody","timepicker","config","_this","componentRef","resolveComponentFactory","keys","forEach","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","detachView","tslib_1.__param","Optional","Inject","DOCUMENT","ComponentFactoryResolver","ApplicationRef","Injector","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","AnimationState","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","toLocaleTimeString","DEFAULT_FORMAT","_b","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","NgxMaterialTimepickerContentComponent","timepickerService","eventService","timeUnit","activeTimeUnit","HOUR","unsubscribe","onKeydown","stopPropagation","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedHour","pipe","shareReplay","bufferSize","refCount","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onHourSelected","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","tslib_1.__decorate","Input","HostListener","KeyboardEvent","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","ESCAPE","NgxMaterialTimepickerComponent","domService","isEsc","EventEmitter","opened","closed","merge","backdropClick","keydownEvent","filter","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","updateTime","TemplateRef","Output","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","ContentChild","static","TIME_LOCALE","InjectionToken","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","push","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","String","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","toLowerCase","fill","map","v","disableHours","hours","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","ViewChild","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","parsedTime","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","timeChanged","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","onKeyDown","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","TimeFormatterPipe","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","activeElement","isFocusActive","focus","preventScroll","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","timepickerTime","_defaultTime","isDefaultTime","period$","h","changeTime","m","onTimeSet","localeTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","isDefaultTimeSet","timeChanges","isFirstChange","increase","decrease","emit","onFocus","isFocused","onBlur","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","ActiveHourPipe","ActiveMinutePipe","currentMinute","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","exports","declarations","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable();\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable();\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from '../components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContentComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContentComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContentComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\nimport { TimeOptions } from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        const {format} = opts;\n\n        return TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE)\n            .toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            });\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: LocaleOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Component, HostListener, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n    styleUrls: ['./ngx-material-timepicker-content.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContentComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: KeyboardEvent): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n    }\n\n    onHourSelected(hour: number): void {\n        this.changeTimeUnit(TimeUnit.MINUTE);\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && !this.time) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\n\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements OnDestroy, TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() defaultTime: string;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.min as DateTime);\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.max as DateTime);\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContentComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick\n        });\n        this.opened.next();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    onInput(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        this.defaultTime = value;\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n\nexport function getHours(format: number): ClockFaceTime[] {\n    return Array(format).fill(1).map((v, i) => {\n        const angleStep = 30;\n        const time = v + i;\n        const angle = angleStep * time;\n        return {time: time === 24 ? 0 : time, angle};\n    });\n}\n\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n    if (config.min || config.max) {\n\n        return hours.map(value => {\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n            };\n        });\n    }\n    return hours;\n}\n\nexport function getMinutes(gap = 1): ClockFaceTime[] {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n\n    for (let i = 0; i < minutesCount; i++) {\n        const angle = angleStep * i;\n        if (i % gap === 0) {\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n        }\n    }\n    return minutes;\n}\n\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n    if (config.min || config.max) {\n\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n        return minutes.map(value => {\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n            };\n        });\n    }\n    return minutes;\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { getHours } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: MouseEvent | Touch): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = isInnerClockChosen\n            ? roundAngle(circleAngle, angleStep) + 360\n            : roundAngle(circleAngle, angleStep);\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = getHours(this.format);\n\n            this.hours = disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n\n            this.minutes = disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime, NumberingSystem } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\nexport class TimeParserPipe implements PipeTransform {\n\n    private numberingSystem: NumberingSystem;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { isDigit } from '../../utils/timepicker.utils';\nimport { TimeParserPipe } from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isDigit(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Pipe({\n    name: 'styleSanitizer'\n})\nexport class StyleSanitizerPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(value: string): any {\n        if (!value) {\n            return value;\n        }\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxTimepickerFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period$: Observable<TimePeriod>;\n\n    hour: number;\n    minute: number;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n    isDefaultTime: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.defaultTime = this.timepickerTime;\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n\n    @Input()\n    set defaultTime(val: string) {\n        const time = TimeAdapter.formatTime(val, {locale: this.locale, format: this._format});\n        this.timepickerService.setDefaultTimeIfAvailable(time, null, null, this._format);\n        this._defaultTime = time;\n        this.timepickerTime = time;\n        this.isDefaultTime = !!time;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n    private _format = 12;\n    private previousFormat: number;\n\n    private hoursList: ClockFaceTime[];\n    private minutesList: ClockFaceTime[];\n\n    private unsubscribe$ = new Subject();\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.period$ = this.timepickerService.selectedPeriod;\n\n        this.timepickerService.selectedHour.pipe(takeUntil(this.unsubscribe$))\n            .subscribe(hour => this.hour = hour.time);\n\n        this.timepickerService.selectedMinute.pipe(takeUntil(this.unsubscribe$))\n            .subscribe(minute => this.minute = minute.time);\n\n        this.hoursList = getHours(this._format);\n        this.minutesList = getMinutes();\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.defaultTime = val;\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        const localeTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.defaultTime = time;\n        this.onChange(localeTime);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this._format);\n        this.timepickerTime = time;\n        this.onChange(time);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeFormatterPipe } from '../../../pipes/time-formatter.pipe';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnInit, OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() isDefaultTimeSet: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n    ngOnInit(): void {\n        if (this.isDefaultTimeSet) {\n            this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const timeChanges = changes['time'];\n        const isTimeNotProvided = timeChanges && timeChanges.isFirstChange() && !this.isDefaultTimeSet;\n\n        if (isTimeNotProvided) {\n            this.time = null;\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            this.timeChanged.emit(nextTime);\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            this.timeChanged.emit(previousTime);\n        }\n    }\n\n    onInput(input: HTMLInputElement) {\n        const value = parseInt(input.value, 10);\n\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                this.time = +String(value)[0];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            input.value = String(this.time);\n            this.timeChanged.emit(this.time);\n        }\n\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n    }\n\n    onBlur(): void {\n        this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\n        this.isFocused = false;\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = time === 0 ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeAdapter } from './services/time-adapter';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        StyleSanitizerPipe,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContentComponent\n    ],\n    providers: [\n        {provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE}\n    ],\n    entryComponents: [NgxMaterialTimepickerContentComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n"]}